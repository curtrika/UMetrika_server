// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.27.1
// source: umetrika/v1/umetrika.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Error_Code int32

const (
	Error_UNDEFINED_ERROR Error_Code = 0
)

// Enum value maps for Error_Code.
var (
	Error_Code_name = map[int32]string{
		0: "UNDEFINED_ERROR",
	}
	Error_Code_value = map[string]int32{
		"UNDEFINED_ERROR": 0,
	}
)

func (x Error_Code) Enum() *Error_Code {
	p := new(Error_Code)
	*p = x
	return p
}

func (x Error_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Error_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_umetrika_v1_umetrika_proto_enumTypes[0].Descriptor()
}

func (Error_Code) Type() protoreflect.EnumType {
	return &file_umetrika_v1_umetrika_proto_enumTypes[0]
}

func (x Error_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Error_Code.Descriptor instead.
func (Error_Code) EnumDescriptor() ([]byte, []int) {
	return file_umetrika_v1_umetrika_proto_rawDescGZIP(), []int{0, 0}
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Error) Reset() {
	*x = Error{}
	mi := &file_umetrika_v1_umetrika_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_umetrika_v1_umetrika_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_umetrika_v1_umetrika_proto_rawDescGZIP(), []int{0}
}

// Common Messages
type PingMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *PingMessage) Reset() {
	*x = PingMessage{}
	mi := &file_umetrika_v1_umetrika_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingMessage) ProtoMessage() {}

func (x *PingMessage) ProtoReflect() protoreflect.Message {
	mi := &file_umetrika_v1_umetrika_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingMessage.ProtoReflect.Descriptor instead.
func (*PingMessage) Descriptor() ([]byte, []int) {
	return file_umetrika_v1_umetrika_proto_rawDescGZIP(), []int{1}
}

func (x *PingMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type EmptyMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyMessage) Reset() {
	*x = EmptyMessage{}
	mi := &file_umetrika_v1_umetrika_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmptyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyMessage) ProtoMessage() {}

func (x *EmptyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_umetrika_v1_umetrika_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyMessage.ProtoReflect.Descriptor instead.
func (*EmptyMessage) Descriptor() ([]byte, []int) {
	return file_umetrika_v1_umetrika_proto_rawDescGZIP(), []int{2}
}

type OwnerPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerName string `protobuf:"bytes,1,opt,name=owner_name,json=ownerName,proto3" json:"owner_name,omitempty"`
	Password  string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Email     string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *OwnerPost) Reset() {
	*x = OwnerPost{}
	mi := &file_umetrika_v1_umetrika_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OwnerPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OwnerPost) ProtoMessage() {}

func (x *OwnerPost) ProtoReflect() protoreflect.Message {
	mi := &file_umetrika_v1_umetrika_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OwnerPost.ProtoReflect.Descriptor instead.
func (*OwnerPost) Descriptor() ([]byte, []int) {
	return file_umetrika_v1_umetrika_proto_rawDescGZIP(), []int{3}
}

func (x *OwnerPost) GetOwnerName() string {
	if x != nil {
		return x.OwnerName
	}
	return ""
}

func (x *OwnerPost) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *OwnerPost) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type OwnerResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId   string                 `protobuf:"bytes,1,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	OwnerName string                 `protobuf:"bytes,2,opt,name=owner_name,json=ownerName,proto3" json:"owner_name,omitempty"`
	Email     string                 `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *OwnerResult) Reset() {
	*x = OwnerResult{}
	mi := &file_umetrika_v1_umetrika_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OwnerResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OwnerResult) ProtoMessage() {}

func (x *OwnerResult) ProtoReflect() protoreflect.Message {
	mi := &file_umetrika_v1_umetrika_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OwnerResult.ProtoReflect.Descriptor instead.
func (*OwnerResult) Descriptor() ([]byte, []int) {
	return file_umetrika_v1_umetrika_proto_rawDescGZIP(), []int{4}
}

func (x *OwnerResult) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *OwnerResult) GetOwnerName() string {
	if x != nil {
		return x.OwnerName
	}
	return ""
}

func (x *OwnerResult) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *OwnerResult) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type TestPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestName    string             `protobuf:"bytes,1,opt,name=test_name,json=testName,proto3" json:"test_name,omitempty"`
	OwnerId     string             `protobuf:"bytes,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	Description string             `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	TestType    string             `protobuf:"bytes,4,opt,name=test_type,json=testType,proto3" json:"test_type,omitempty"`
	Questions   []*QuestionPostDTO `protobuf:"bytes,5,rep,name=questions,proto3" json:"questions,omitempty"`
}

func (x *TestPost) Reset() {
	*x = TestPost{}
	mi := &file_umetrika_v1_umetrika_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestPost) ProtoMessage() {}

func (x *TestPost) ProtoReflect() protoreflect.Message {
	mi := &file_umetrika_v1_umetrika_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestPost.ProtoReflect.Descriptor instead.
func (*TestPost) Descriptor() ([]byte, []int) {
	return file_umetrika_v1_umetrika_proto_rawDescGZIP(), []int{5}
}

func (x *TestPost) GetTestName() string {
	if x != nil {
		return x.TestName
	}
	return ""
}

func (x *TestPost) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *TestPost) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TestPost) GetTestType() string {
	if x != nil {
		return x.TestType
	}
	return ""
}

func (x *TestPost) GetQuestions() []*QuestionPostDTO {
	if x != nil {
		return x.Questions
	}
	return nil
}

type QuestionPostDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionText  string           `protobuf:"bytes,1,opt,name=question_text,json=questionText,proto3" json:"question_text,omitempty"`
	QuestionOrder int32            `protobuf:"varint,2,opt,name=question_order,json=questionOrder,proto3" json:"question_order,omitempty"`
	QuestionType  string           `protobuf:"bytes,3,opt,name=question_type,json=questionType,proto3" json:"question_type,omitempty"`
	Answers       []*AnswerPostDTO `protobuf:"bytes,4,rep,name=answers,proto3" json:"answers,omitempty"`
}

func (x *QuestionPostDTO) Reset() {
	*x = QuestionPostDTO{}
	mi := &file_umetrika_v1_umetrika_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuestionPostDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionPostDTO) ProtoMessage() {}

func (x *QuestionPostDTO) ProtoReflect() protoreflect.Message {
	mi := &file_umetrika_v1_umetrika_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionPostDTO.ProtoReflect.Descriptor instead.
func (*QuestionPostDTO) Descriptor() ([]byte, []int) {
	return file_umetrika_v1_umetrika_proto_rawDescGZIP(), []int{6}
}

func (x *QuestionPostDTO) GetQuestionText() string {
	if x != nil {
		return x.QuestionText
	}
	return ""
}

func (x *QuestionPostDTO) GetQuestionOrder() int32 {
	if x != nil {
		return x.QuestionOrder
	}
	return 0
}

func (x *QuestionPostDTO) GetQuestionType() string {
	if x != nil {
		return x.QuestionType
	}
	return ""
}

func (x *QuestionPostDTO) GetAnswers() []*AnswerPostDTO {
	if x != nil {
		return x.Answers
	}
	return nil
}

type AnswerPostDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnswerText  string `protobuf:"bytes,1,opt,name=answer_text,json=answerText,proto3" json:"answer_text,omitempty"`
	AnswerOrder int32  `protobuf:"varint,2,opt,name=answer_order,json=answerOrder,proto3" json:"answer_order,omitempty"`
}

func (x *AnswerPostDTO) Reset() {
	*x = AnswerPostDTO{}
	mi := &file_umetrika_v1_umetrika_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnswerPostDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerPostDTO) ProtoMessage() {}

func (x *AnswerPostDTO) ProtoReflect() protoreflect.Message {
	mi := &file_umetrika_v1_umetrika_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerPostDTO.ProtoReflect.Descriptor instead.
func (*AnswerPostDTO) Descriptor() ([]byte, []int) {
	return file_umetrika_v1_umetrika_proto_rawDescGZIP(), []int{7}
}

func (x *AnswerPostDTO) GetAnswerText() string {
	if x != nil {
		return x.AnswerText
	}
	return ""
}

func (x *AnswerPostDTO) GetAnswerOrder() int32 {
	if x != nil {
		return x.AnswerOrder
	}
	return 0
}

type TestResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestId    string                 `protobuf:"bytes,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	OwnerId   string                 `protobuf:"bytes,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	TestName  string                 `protobuf:"bytes,3,opt,name=test_name,json=testName,proto3" json:"test_name,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *TestResult) Reset() {
	*x = TestResult{}
	mi := &file_umetrika_v1_umetrika_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResult) ProtoMessage() {}

func (x *TestResult) ProtoReflect() protoreflect.Message {
	mi := &file_umetrika_v1_umetrika_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResult.ProtoReflect.Descriptor instead.
func (*TestResult) Descriptor() ([]byte, []int) {
	return file_umetrika_v1_umetrika_proto_rawDescGZIP(), []int{8}
}

func (x *TestResult) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *TestResult) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *TestResult) GetTestName() string {
	if x != nil {
		return x.TestName
	}
	return ""
}

func (x *TestResult) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type TestOwnerGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId string `protobuf:"bytes,1,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
}

func (x *TestOwnerGet) Reset() {
	*x = TestOwnerGet{}
	mi := &file_umetrika_v1_umetrika_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestOwnerGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestOwnerGet) ProtoMessage() {}

func (x *TestOwnerGet) ProtoReflect() protoreflect.Message {
	mi := &file_umetrika_v1_umetrika_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestOwnerGet.ProtoReflect.Descriptor instead.
func (*TestOwnerGet) Descriptor() ([]byte, []int) {
	return file_umetrika_v1_umetrika_proto_rawDescGZIP(), []int{9}
}

func (x *TestOwnerGet) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

type TestsGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tests []*TestGet `protobuf:"bytes,1,rep,name=tests,proto3" json:"tests,omitempty"`
}

func (x *TestsGet) Reset() {
	*x = TestsGet{}
	mi := &file_umetrika_v1_umetrika_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestsGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestsGet) ProtoMessage() {}

func (x *TestsGet) ProtoReflect() protoreflect.Message {
	mi := &file_umetrika_v1_umetrika_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestsGet.ProtoReflect.Descriptor instead.
func (*TestsGet) Descriptor() ([]byte, []int) {
	return file_umetrika_v1_umetrika_proto_rawDescGZIP(), []int{10}
}

func (x *TestsGet) GetTests() []*TestGet {
	if x != nil {
		return x.Tests
	}
	return nil
}

type TestGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestId      string            `protobuf:"bytes,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	TestName    string            `protobuf:"bytes,2,opt,name=test_name,json=testName,proto3" json:"test_name,omitempty"`
	OwnerId     string            `protobuf:"bytes,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	Description string            `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	TestType    string            `protobuf:"bytes,5,opt,name=test_type,json=testType,proto3" json:"test_type,omitempty"`
	Questions   []*QuestionGetDTO `protobuf:"bytes,6,rep,name=questions,proto3" json:"questions,omitempty"`
}

func (x *TestGet) Reset() {
	*x = TestGet{}
	mi := &file_umetrika_v1_umetrika_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestGet) ProtoMessage() {}

func (x *TestGet) ProtoReflect() protoreflect.Message {
	mi := &file_umetrika_v1_umetrika_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestGet.ProtoReflect.Descriptor instead.
func (*TestGet) Descriptor() ([]byte, []int) {
	return file_umetrika_v1_umetrika_proto_rawDescGZIP(), []int{11}
}

func (x *TestGet) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *TestGet) GetTestName() string {
	if x != nil {
		return x.TestName
	}
	return ""
}

func (x *TestGet) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *TestGet) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TestGet) GetTestType() string {
	if x != nil {
		return x.TestType
	}
	return ""
}

func (x *TestGet) GetQuestions() []*QuestionGetDTO {
	if x != nil {
		return x.Questions
	}
	return nil
}

type QuestionGetDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionId    string          `protobuf:"bytes,1,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	QuestionText  string          `protobuf:"bytes,2,opt,name=question_text,json=questionText,proto3" json:"question_text,omitempty"`
	QuestionOrder int32           `protobuf:"varint,3,opt,name=question_order,json=questionOrder,proto3" json:"question_order,omitempty"`
	QuestionType  string          `protobuf:"bytes,4,opt,name=question_type,json=questionType,proto3" json:"question_type,omitempty"`
	Answers       []*AnswerGetDTO `protobuf:"bytes,5,rep,name=answers,proto3" json:"answers,omitempty"`
}

func (x *QuestionGetDTO) Reset() {
	*x = QuestionGetDTO{}
	mi := &file_umetrika_v1_umetrika_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuestionGetDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionGetDTO) ProtoMessage() {}

func (x *QuestionGetDTO) ProtoReflect() protoreflect.Message {
	mi := &file_umetrika_v1_umetrika_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionGetDTO.ProtoReflect.Descriptor instead.
func (*QuestionGetDTO) Descriptor() ([]byte, []int) {
	return file_umetrika_v1_umetrika_proto_rawDescGZIP(), []int{12}
}

func (x *QuestionGetDTO) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

func (x *QuestionGetDTO) GetQuestionText() string {
	if x != nil {
		return x.QuestionText
	}
	return ""
}

func (x *QuestionGetDTO) GetQuestionOrder() int32 {
	if x != nil {
		return x.QuestionOrder
	}
	return 0
}

func (x *QuestionGetDTO) GetQuestionType() string {
	if x != nil {
		return x.QuestionType
	}
	return ""
}

func (x *QuestionGetDTO) GetAnswers() []*AnswerGetDTO {
	if x != nil {
		return x.Answers
	}
	return nil
}

type AnswerGetDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnswerId    string `protobuf:"bytes,1,opt,name=answer_id,json=answerId,proto3" json:"answer_id,omitempty"`
	AnswerText  string `protobuf:"bytes,2,opt,name=answer_text,json=answerText,proto3" json:"answer_text,omitempty"`
	AnswerOrder int32  `protobuf:"varint,3,opt,name=answer_order,json=answerOrder,proto3" json:"answer_order,omitempty"`
}

func (x *AnswerGetDTO) Reset() {
	*x = AnswerGetDTO{}
	mi := &file_umetrika_v1_umetrika_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnswerGetDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerGetDTO) ProtoMessage() {}

func (x *AnswerGetDTO) ProtoReflect() protoreflect.Message {
	mi := &file_umetrika_v1_umetrika_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerGetDTO.ProtoReflect.Descriptor instead.
func (*AnswerGetDTO) Descriptor() ([]byte, []int) {
	return file_umetrika_v1_umetrika_proto_rawDescGZIP(), []int{13}
}

func (x *AnswerGetDTO) GetAnswerId() string {
	if x != nil {
		return x.AnswerId
	}
	return ""
}

func (x *AnswerGetDTO) GetAnswerText() string {
	if x != nil {
		return x.AnswerText
	}
	return ""
}

func (x *AnswerGetDTO) GetAnswerOrder() int32 {
	if x != nil {
		return x.AnswerOrder
	}
	return 0
}

type GetTeacherDisciplinesAndClassesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeacherId string `protobuf:"bytes,1,opt,name=teacher_id,json=teacherId,proto3" json:"teacher_id,omitempty"`
}

func (x *GetTeacherDisciplinesAndClassesRequest) Reset() {
	*x = GetTeacherDisciplinesAndClassesRequest{}
	mi := &file_umetrika_v1_umetrika_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTeacherDisciplinesAndClassesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeacherDisciplinesAndClassesRequest) ProtoMessage() {}

func (x *GetTeacherDisciplinesAndClassesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_umetrika_v1_umetrika_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeacherDisciplinesAndClassesRequest.ProtoReflect.Descriptor instead.
func (*GetTeacherDisciplinesAndClassesRequest) Descriptor() ([]byte, []int) {
	return file_umetrika_v1_umetrika_proto_rawDescGZIP(), []int{14}
}

func (x *GetTeacherDisciplinesAndClassesRequest) GetTeacherId() string {
	if x != nil {
		return x.TeacherId
	}
	return ""
}

type GetTeacherDisciplinesAndClassesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errors            []*Error             `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
	TeacherDiscipline []*TeacherDiscipline `protobuf:"bytes,10,rep,name=teacher_discipline,json=teacherDiscipline,proto3" json:"teacher_discipline,omitempty"`
}

func (x *GetTeacherDisciplinesAndClassesResponse) Reset() {
	*x = GetTeacherDisciplinesAndClassesResponse{}
	mi := &file_umetrika_v1_umetrika_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTeacherDisciplinesAndClassesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeacherDisciplinesAndClassesResponse) ProtoMessage() {}

func (x *GetTeacherDisciplinesAndClassesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_umetrika_v1_umetrika_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeacherDisciplinesAndClassesResponse.ProtoReflect.Descriptor instead.
func (*GetTeacherDisciplinesAndClassesResponse) Descriptor() ([]byte, []int) {
	return file_umetrika_v1_umetrika_proto_rawDescGZIP(), []int{15}
}

func (x *GetTeacherDisciplinesAndClassesResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetTeacherDisciplinesAndClassesResponse) GetTeacherDiscipline() []*TeacherDiscipline {
	if x != nil {
		return x.TeacherDiscipline
	}
	return nil
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FirstName  string `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	MiddleName string `protobuf:"bytes,3,opt,name=middle_name,json=middleName,proto3" json:"middle_name,omitempty"`
	LastName   string `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Email      string `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	Gender     bool   `protobuf:"varint,6,opt,name=gender,proto3" json:"gender,omitempty"`
	Role       string `protobuf:"bytes,7,opt,name=role,proto3" json:"role,omitempty"`
	SchoolId   string `protobuf:"bytes,8,opt,name=school_id,json=schoolId,proto3" json:"school_id,omitempty"`
	ClassesId  string `protobuf:"bytes,9,opt,name=classes_id,json=classesId,proto3" json:"classes_id,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	mi := &file_umetrika_v1_umetrika_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_umetrika_v1_umetrika_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_umetrika_v1_umetrika_proto_rawDescGZIP(), []int{16}
}

func (x *User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *User) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *User) GetMiddleName() string {
	if x != nil {
		return x.MiddleName
	}
	return ""
}

func (x *User) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetGender() bool {
	if x != nil {
		return x.Gender
	}
	return false
}

func (x *User) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *User) GetSchoolId() string {
	if x != nil {
		return x.SchoolId
	}
	return ""
}

func (x *User) GetClassesId() string {
	if x != nil {
		return x.ClassesId
	}
	return ""
}

type Classes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            string  `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Title         string  `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	MainTeacherID string  `protobuf:"bytes,3,opt,name=MainTeacherID,proto3" json:"MainTeacherID,omitempty"`
	Students      []*User `protobuf:"bytes,4,rep,name=students,proto3" json:"students,omitempty"`
}

func (x *Classes) Reset() {
	*x = Classes{}
	mi := &file_umetrika_v1_umetrika_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Classes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Classes) ProtoMessage() {}

func (x *Classes) ProtoReflect() protoreflect.Message {
	mi := &file_umetrika_v1_umetrika_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Classes.ProtoReflect.Descriptor instead.
func (*Classes) Descriptor() ([]byte, []int) {
	return file_umetrika_v1_umetrika_proto_rawDescGZIP(), []int{17}
}

func (x *Classes) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Classes) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Classes) GetMainTeacherID() string {
	if x != nil {
		return x.MainTeacherID
	}
	return ""
}

func (x *Classes) GetStudents() []*User {
	if x != nil {
		return x.Students
	}
	return nil
}

type TeacherDiscipline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      string     `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Title   string     `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	Classes []*Classes `protobuf:"bytes,3,rep,name=classes,proto3" json:"classes,omitempty"`
}

func (x *TeacherDiscipline) Reset() {
	*x = TeacherDiscipline{}
	mi := &file_umetrika_v1_umetrika_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TeacherDiscipline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeacherDiscipline) ProtoMessage() {}

func (x *TeacherDiscipline) ProtoReflect() protoreflect.Message {
	mi := &file_umetrika_v1_umetrika_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeacherDiscipline.ProtoReflect.Descriptor instead.
func (*TeacherDiscipline) Descriptor() ([]byte, []int) {
	return file_umetrika_v1_umetrika_proto_rawDescGZIP(), []int{18}
}

func (x *TeacherDiscipline) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *TeacherDiscipline) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TeacherDiscipline) GetClasses() []*Classes {
	if x != nil {
		return x.Classes
	}
	return nil
}

var File_umetrika_v1_umetrika_proto protoreflect.FileDescriptor

var file_umetrika_v1_umetrika_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x75, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x6b, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x6b, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x75, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x6b, 0x61, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x24, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x1b,
	0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49,
	0x4e, 0x45, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x00, 0x22, 0x27, 0x0a, 0x0b, 0x50,
	0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x0e, 0x0a, 0x0c, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x5c, 0x0a, 0x09, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x22, 0x98, 0x01, 0x0a, 0x0b, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xba, 0x01,
	0x0a, 0x08, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x37, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x6b, 0x61, 0x2e,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x54, 0x4f, 0x52,
	0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xb5, 0x01, 0x0a, 0x0f, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x54, 0x4f, 0x12, 0x23,
	0x0a, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x31, 0x0a, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x75, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x6b, 0x61, 0x2e, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x54, 0x4f, 0x52, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x73, 0x22, 0x53, 0x0a, 0x0d, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x74,
	0x44, 0x54, 0x4f, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x98, 0x01, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x29, 0x0a, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x47,
	0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x22, 0x33, 0x0a,
	0x08, 0x54, 0x65, 0x73, 0x74, 0x73, 0x47, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x6b, 0x61, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x47, 0x65, 0x74, 0x52, 0x05, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x22, 0xd1, 0x01, 0x0a, 0x07, 0x54, 0x65, 0x73, 0x74, 0x47, 0x65, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36,
	0x0a, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x75, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x6b, 0x61, 0x2e, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x44, 0x54, 0x4f, 0x52, 0x09, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xd4, 0x01, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x44, 0x54, 0x4f, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x61,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x75,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x6b, 0x61, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x47, 0x65,
	0x74, 0x44, 0x54, 0x4f, 0x52, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x22, 0x6f, 0x0a,
	0x0c, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x47, 0x65, 0x74, 0x44, 0x54, 0x4f, 0x12, 0x1b, 0x0a,
	0x09, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x47,
	0x0a, 0x26, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63,
	0x69, 0x70, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x63,
	0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65,
	0x61, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x22, 0x9e, 0x01, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x54,
	0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x69, 0x70, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x41, 0x6e, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x6b, 0x61, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x4a, 0x0a, 0x12,
	0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x69, 0x70, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x75, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x6b, 0x61, 0x2e, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x69,
	0x70, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x11, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x44, 0x69,
	0x73, 0x63, 0x69, 0x70, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xf1, 0x01, 0x0a, 0x04, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x49, 0x64, 0x22, 0x81, 0x01, 0x0a,
	0x07, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x4d, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4d, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x63, 0x68,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x08, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x6b,
	0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0x66, 0x0a, 0x11, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x69,
	0x70, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x6b, 0x61, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x52,
	0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x32, 0xc6, 0x04, 0x0a, 0x08, 0x55, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x6b, 0x61, 0x12, 0x54, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e,
	0x75, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x6b, 0x61, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x15, 0x2e, 0x75, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x6b, 0x61,
	0x2e, 0x50, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x1d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x6b, 0x61, 0x2f, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x5c, 0x0a, 0x0b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x13, 0x2e, 0x75, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x6b, 0x61, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x1a,
	0x15, 0x2e, 0x75, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x6b, 0x61, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01,
	0x2a, 0x22, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x6b, 0x61, 0x2f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x0a, 0x41, 0x64, 0x64,
	0x4e, 0x65, 0x77, 0x54, 0x65, 0x73, 0x74, 0x12, 0x12, 0x2e, 0x75, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x6b, 0x61, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x75, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x6b, 0x61, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x6b, 0x61, 0x2f, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x12, 0x62, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x54,
	0x65, 0x73, 0x74, 0x42, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x2e, 0x75,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x6b, 0x61, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x47, 0x65, 0x74, 0x1a, 0x12, 0x2e, 0x75, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x6b, 0x61, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x73, 0x47, 0x65, 0x74, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18,
	0x12, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x6b, 0x61, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x12, 0xc6, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74,
	0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x69, 0x70, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x41, 0x6e, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x30, 0x2e, 0x75,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x6b, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x63, 0x68,
	0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x69, 0x70, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x41, 0x6e, 0x64,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x75, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x6b, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61,
	0x63, 0x68, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x69, 0x70, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x41,
	0x6e, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x12, 0x36, 0x2f, 0x75, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x6b, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x6b, 0x61,
	0x2f, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x69, 0x70, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x75, 0x72, 0x74, 0x72, 0x69, 0x6b, 0x61, 0x2f, 0x55, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x6b,
	0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x75, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x6b, 0x61, 0x2f, 0x76, 0x31, 0x3b, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_umetrika_v1_umetrika_proto_rawDescOnce sync.Once
	file_umetrika_v1_umetrika_proto_rawDescData = file_umetrika_v1_umetrika_proto_rawDesc
)

func file_umetrika_v1_umetrika_proto_rawDescGZIP() []byte {
	file_umetrika_v1_umetrika_proto_rawDescOnce.Do(func() {
		file_umetrika_v1_umetrika_proto_rawDescData = protoimpl.X.CompressGZIP(file_umetrika_v1_umetrika_proto_rawDescData)
	})
	return file_umetrika_v1_umetrika_proto_rawDescData
}

var file_umetrika_v1_umetrika_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_umetrika_v1_umetrika_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_umetrika_v1_umetrika_proto_goTypes = []any{
	(Error_Code)(0),         // 0: umetrika.Error.Code
	(*Error)(nil),           // 1: umetrika.Error
	(*PingMessage)(nil),     // 2: umetrika.PingMessage
	(*EmptyMessage)(nil),    // 3: umetrika.EmptyMessage
	(*OwnerPost)(nil),       // 4: umetrika.OwnerPost
	(*OwnerResult)(nil),     // 5: umetrika.OwnerResult
	(*TestPost)(nil),        // 6: umetrika.TestPost
	(*QuestionPostDTO)(nil), // 7: umetrika.QuestionPostDTO
	(*AnswerPostDTO)(nil),   // 8: umetrika.AnswerPostDTO
	(*TestResult)(nil),      // 9: umetrika.TestResult
	(*TestOwnerGet)(nil),    // 10: umetrika.TestOwnerGet
	(*TestsGet)(nil),        // 11: umetrika.TestsGet
	(*TestGet)(nil),         // 12: umetrika.TestGet
	(*QuestionGetDTO)(nil),  // 13: umetrika.QuestionGetDTO
	(*AnswerGetDTO)(nil),    // 14: umetrika.AnswerGetDTO
	(*GetTeacherDisciplinesAndClassesRequest)(nil),  // 15: umetrika.GetTeacherDisciplinesAndClassesRequest
	(*GetTeacherDisciplinesAndClassesResponse)(nil), // 16: umetrika.GetTeacherDisciplinesAndClassesResponse
	(*User)(nil),                  // 17: umetrika.User
	(*Classes)(nil),               // 18: umetrika.Classes
	(*TeacherDiscipline)(nil),     // 19: umetrika.TeacherDiscipline
	(*timestamppb.Timestamp)(nil), // 20: google.protobuf.Timestamp
}
var file_umetrika_v1_umetrika_proto_depIdxs = []int32{
	20, // 0: umetrika.OwnerResult.created_at:type_name -> google.protobuf.Timestamp
	7,  // 1: umetrika.TestPost.questions:type_name -> umetrika.QuestionPostDTO
	8,  // 2: umetrika.QuestionPostDTO.answers:type_name -> umetrika.AnswerPostDTO
	20, // 3: umetrika.TestResult.created_at:type_name -> google.protobuf.Timestamp
	12, // 4: umetrika.TestsGet.tests:type_name -> umetrika.TestGet
	13, // 5: umetrika.TestGet.questions:type_name -> umetrika.QuestionGetDTO
	14, // 6: umetrika.QuestionGetDTO.answers:type_name -> umetrika.AnswerGetDTO
	1,  // 7: umetrika.GetTeacherDisciplinesAndClassesResponse.errors:type_name -> umetrika.Error
	19, // 8: umetrika.GetTeacherDisciplinesAndClassesResponse.teacher_discipline:type_name -> umetrika.TeacherDiscipline
	17, // 9: umetrika.Classes.students:type_name -> umetrika.User
	18, // 10: umetrika.TeacherDiscipline.classes:type_name -> umetrika.Classes
	3,  // 11: umetrika.UMetrika.Ping:input_type -> umetrika.EmptyMessage
	4,  // 12: umetrika.UMetrika.CreateOwner:input_type -> umetrika.OwnerPost
	6,  // 13: umetrika.UMetrika.AddNewTest:input_type -> umetrika.TestPost
	10, // 14: umetrika.UMetrika.GetFullTestByOwnerId:input_type -> umetrika.TestOwnerGet
	15, // 15: umetrika.UMetrika.GetTeacherDisciplinesAndClasses:input_type -> umetrika.GetTeacherDisciplinesAndClassesRequest
	2,  // 16: umetrika.UMetrika.Ping:output_type -> umetrika.PingMessage
	5,  // 17: umetrika.UMetrika.CreateOwner:output_type -> umetrika.OwnerResult
	9,  // 18: umetrika.UMetrika.AddNewTest:output_type -> umetrika.TestResult
	11, // 19: umetrika.UMetrika.GetFullTestByOwnerId:output_type -> umetrika.TestsGet
	16, // 20: umetrika.UMetrika.GetTeacherDisciplinesAndClasses:output_type -> umetrika.GetTeacherDisciplinesAndClassesResponse
	16, // [16:21] is the sub-list for method output_type
	11, // [11:16] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_umetrika_v1_umetrika_proto_init() }
func file_umetrika_v1_umetrika_proto_init() {
	if File_umetrika_v1_umetrika_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_umetrika_v1_umetrika_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_umetrika_v1_umetrika_proto_goTypes,
		DependencyIndexes: file_umetrika_v1_umetrika_proto_depIdxs,
		EnumInfos:         file_umetrika_v1_umetrika_proto_enumTypes,
		MessageInfos:      file_umetrika_v1_umetrika_proto_msgTypes,
	}.Build()
	File_umetrika_v1_umetrika_proto = out.File
	file_umetrika_v1_umetrika_proto_rawDesc = nil
	file_umetrika_v1_umetrika_proto_goTypes = nil
	file_umetrika_v1_umetrika_proto_depIdxs = nil
}
