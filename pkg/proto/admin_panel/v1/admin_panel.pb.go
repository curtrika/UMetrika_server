// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.27.1
// source: admin_panel/v1/admin_panel.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Error_Code int32

const (
	Error_UNDEFINED_ERROR Error_Code = 0
)

// Enum value maps for Error_Code.
var (
	Error_Code_name = map[int32]string{
		0: "UNDEFINED_ERROR",
	}
	Error_Code_value = map[string]int32{
		"UNDEFINED_ERROR": 0,
	}
)

func (x Error_Code) Enum() *Error_Code {
	p := new(Error_Code)
	*p = x
	return p
}

func (x Error_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Error_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_admin_panel_v1_admin_panel_proto_enumTypes[0].Descriptor()
}

func (Error_Code) Type() protoreflect.EnumType {
	return &file_admin_panel_v1_admin_panel_proto_enumTypes[0]
}

func (x Error_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Error_Code.Descriptor instead.
func (Error_Code) EnumDescriptor() ([]byte, []int) {
	return file_admin_panel_v1_admin_panel_proto_rawDescGZIP(), []int{3, 0}
}

type PingMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PingMessage) Reset() {
	*x = PingMessage{}
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingMessage) ProtoMessage() {}

func (x *PingMessage) ProtoReflect() protoreflect.Message {
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingMessage.ProtoReflect.Descriptor instead.
func (*PingMessage) Descriptor() ([]byte, []int) {
	return file_admin_panel_v1_admin_panel_proto_rawDescGZIP(), []int{0}
}

func (x *PingMessage) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type CreateDisciplineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *CreateDisciplineRequest) Reset() {
	*x = CreateDisciplineRequest{}
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDisciplineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDisciplineRequest) ProtoMessage() {}

func (x *CreateDisciplineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDisciplineRequest.ProtoReflect.Descriptor instead.
func (*CreateDisciplineRequest) Descriptor() ([]byte, []int) {
	return file_admin_panel_v1_admin_panel_proto_rawDescGZIP(), []int{1}
}

func (x *CreateDisciplineRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type CreateDisciplineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Discipline *Discipline `protobuf:"bytes,1,opt,name=discipline,proto3" json:"discipline,omitempty"`
	Errors     []*Error    `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *CreateDisciplineResponse) Reset() {
	*x = CreateDisciplineResponse{}
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDisciplineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDisciplineResponse) ProtoMessage() {}

func (x *CreateDisciplineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDisciplineResponse.ProtoReflect.Descriptor instead.
func (*CreateDisciplineResponse) Descriptor() ([]byte, []int) {
	return file_admin_panel_v1_admin_panel_proto_rawDescGZIP(), []int{2}
}

func (x *CreateDisciplineResponse) GetDiscipline() *Discipline {
	if x != nil {
		return x.Discipline
	}
	return nil
}

func (x *CreateDisciplineResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Error) Reset() {
	*x = Error{}
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_admin_panel_v1_admin_panel_proto_rawDescGZIP(), []int{3}
}

type Discipline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *Discipline) Reset() {
	*x = Discipline{}
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Discipline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Discipline) ProtoMessage() {}

func (x *Discipline) ProtoReflect() protoreflect.Message {
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Discipline.ProtoReflect.Descriptor instead.
func (*Discipline) Descriptor() ([]byte, []int) {
	return file_admin_panel_v1_admin_panel_proto_rawDescGZIP(), []int{4}
}

func (x *Discipline) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Discipline) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type PsychologicalType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *PsychologicalType) Reset() {
	*x = PsychologicalType{}
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PsychologicalType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PsychologicalType) ProtoMessage() {}

func (x *PsychologicalType) ProtoReflect() protoreflect.Message {
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PsychologicalType.ProtoReflect.Descriptor instead.
func (*PsychologicalType) Descriptor() ([]byte, []int) {
	return file_admin_panel_v1_admin_panel_proto_rawDescGZIP(), []int{5}
}

func (x *PsychologicalType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PsychologicalType) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type CreatePsychologicalTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *CreatePsychologicalTypeRequest) Reset() {
	*x = CreatePsychologicalTypeRequest{}
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePsychologicalTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePsychologicalTypeRequest) ProtoMessage() {}

func (x *CreatePsychologicalTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePsychologicalTypeRequest.ProtoReflect.Descriptor instead.
func (*CreatePsychologicalTypeRequest) Descriptor() ([]byte, []int) {
	return file_admin_panel_v1_admin_panel_proto_rawDescGZIP(), []int{6}
}

func (x *CreatePsychologicalTypeRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type GetPsychologicalTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetPsychologicalTypeRequest) Reset() {
	*x = GetPsychologicalTypeRequest{}
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPsychologicalTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPsychologicalTypeRequest) ProtoMessage() {}

func (x *GetPsychologicalTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPsychologicalTypeRequest.ProtoReflect.Descriptor instead.
func (*GetPsychologicalTypeRequest) Descriptor() ([]byte, []int) {
	return file_admin_panel_v1_admin_panel_proto_rawDescGZIP(), []int{7}
}

func (x *GetPsychologicalTypeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type PsychologicalTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PsychologicalType *PsychologicalType `protobuf:"bytes,1,opt,name=psychological_type,json=psychologicalType,proto3" json:"psychological_type,omitempty"`
	Errors            []*Error           `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *PsychologicalTypeResponse) Reset() {
	*x = PsychologicalTypeResponse{}
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PsychologicalTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PsychologicalTypeResponse) ProtoMessage() {}

func (x *PsychologicalTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PsychologicalTypeResponse.ProtoReflect.Descriptor instead.
func (*PsychologicalTypeResponse) Descriptor() ([]byte, []int) {
	return file_admin_panel_v1_admin_panel_proto_rawDescGZIP(), []int{8}
}

func (x *PsychologicalTypeResponse) GetPsychologicalType() *PsychologicalType {
	if x != nil {
		return x.PsychologicalType
	}
	return nil
}

func (x *PsychologicalTypeResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type ListPsychologicalTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListPsychologicalTypesRequest) Reset() {
	*x = ListPsychologicalTypesRequest{}
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPsychologicalTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPsychologicalTypesRequest) ProtoMessage() {}

func (x *ListPsychologicalTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPsychologicalTypesRequest.ProtoReflect.Descriptor instead.
func (*ListPsychologicalTypesRequest) Descriptor() ([]byte, []int) {
	return file_admin_panel_v1_admin_panel_proto_rawDescGZIP(), []int{9}
}

type ListPsychologicalTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PsychologicalTypes []*PsychologicalType `protobuf:"bytes,1,rep,name=psychological_types,json=psychologicalTypes,proto3" json:"psychological_types,omitempty"`
	Errors             []*Error             `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *ListPsychologicalTypesResponse) Reset() {
	*x = ListPsychologicalTypesResponse{}
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPsychologicalTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPsychologicalTypesResponse) ProtoMessage() {}

func (x *ListPsychologicalTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPsychologicalTypesResponse.ProtoReflect.Descriptor instead.
func (*ListPsychologicalTypesResponse) Descriptor() ([]byte, []int) {
	return file_admin_panel_v1_admin_panel_proto_rawDescGZIP(), []int{10}
}

func (x *ListPsychologicalTypesResponse) GetPsychologicalTypes() []*PsychologicalType {
	if x != nil {
		return x.PsychologicalTypes
	}
	return nil
}

func (x *ListPsychologicalTypesResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type PsychologicalTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title           string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	FirstQuestionId string `protobuf:"bytes,3,opt,name=first_question_id,json=firstQuestionId,proto3" json:"first_question_id,omitempty"`
	TypeId          string `protobuf:"bytes,4,opt,name=type_id,json=typeId,proto3" json:"type_id,omitempty"`
	OwnerId         string `protobuf:"bytes,5,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
}

func (x *PsychologicalTest) Reset() {
	*x = PsychologicalTest{}
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PsychologicalTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PsychologicalTest) ProtoMessage() {}

func (x *PsychologicalTest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PsychologicalTest.ProtoReflect.Descriptor instead.
func (*PsychologicalTest) Descriptor() ([]byte, []int) {
	return file_admin_panel_v1_admin_panel_proto_rawDescGZIP(), []int{11}
}

func (x *PsychologicalTest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PsychologicalTest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PsychologicalTest) GetFirstQuestionId() string {
	if x != nil {
		return x.FirstQuestionId
	}
	return ""
}

func (x *PsychologicalTest) GetTypeId() string {
	if x != nil {
		return x.TypeId
	}
	return ""
}

func (x *PsychologicalTest) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

type CreatePsychologicalTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title           string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	FirstQuestionId string `protobuf:"bytes,2,opt,name=first_question_id,json=firstQuestionId,proto3" json:"first_question_id,omitempty"`
	TypeId          string `protobuf:"bytes,3,opt,name=type_id,json=typeId,proto3" json:"type_id,omitempty"`
	OwnerId         string `protobuf:"bytes,4,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
}

func (x *CreatePsychologicalTestRequest) Reset() {
	*x = CreatePsychologicalTestRequest{}
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePsychologicalTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePsychologicalTestRequest) ProtoMessage() {}

func (x *CreatePsychologicalTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePsychologicalTestRequest.ProtoReflect.Descriptor instead.
func (*CreatePsychologicalTestRequest) Descriptor() ([]byte, []int) {
	return file_admin_panel_v1_admin_panel_proto_rawDescGZIP(), []int{12}
}

func (x *CreatePsychologicalTestRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreatePsychologicalTestRequest) GetFirstQuestionId() string {
	if x != nil {
		return x.FirstQuestionId
	}
	return ""
}

func (x *CreatePsychologicalTestRequest) GetTypeId() string {
	if x != nil {
		return x.TypeId
	}
	return ""
}

func (x *CreatePsychologicalTestRequest) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

type GetPsychologicalTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetPsychologicalTestRequest) Reset() {
	*x = GetPsychologicalTestRequest{}
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPsychologicalTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPsychologicalTestRequest) ProtoMessage() {}

func (x *GetPsychologicalTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPsychologicalTestRequest.ProtoReflect.Descriptor instead.
func (*GetPsychologicalTestRequest) Descriptor() ([]byte, []int) {
	return file_admin_panel_v1_admin_panel_proto_rawDescGZIP(), []int{13}
}

func (x *GetPsychologicalTestRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type PsychologicalTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PsychologicalTest *PsychologicalTest `protobuf:"bytes,1,opt,name=psychological_test,json=psychologicalTest,proto3" json:"psychological_test,omitempty"`
	Errors            []*Error           `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *PsychologicalTestResponse) Reset() {
	*x = PsychologicalTestResponse{}
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PsychologicalTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PsychologicalTestResponse) ProtoMessage() {}

func (x *PsychologicalTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PsychologicalTestResponse.ProtoReflect.Descriptor instead.
func (*PsychologicalTestResponse) Descriptor() ([]byte, []int) {
	return file_admin_panel_v1_admin_panel_proto_rawDescGZIP(), []int{14}
}

func (x *PsychologicalTestResponse) GetPsychologicalTest() *PsychologicalTest {
	if x != nil {
		return x.PsychologicalTest
	}
	return nil
}

func (x *PsychologicalTestResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type ListPsychologicalTestsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListPsychologicalTestsRequest) Reset() {
	*x = ListPsychologicalTestsRequest{}
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPsychologicalTestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPsychologicalTestsRequest) ProtoMessage() {}

func (x *ListPsychologicalTestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPsychologicalTestsRequest.ProtoReflect.Descriptor instead.
func (*ListPsychologicalTestsRequest) Descriptor() ([]byte, []int) {
	return file_admin_panel_v1_admin_panel_proto_rawDescGZIP(), []int{15}
}

type ListPsychologicalTestsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PsychologicalTests []*PsychologicalTest `protobuf:"bytes,1,rep,name=psychological_tests,json=psychologicalTests,proto3" json:"psychological_tests,omitempty"`
	Errors             []*Error             `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *ListPsychologicalTestsResponse) Reset() {
	*x = ListPsychologicalTestsResponse{}
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPsychologicalTestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPsychologicalTestsResponse) ProtoMessage() {}

func (x *ListPsychologicalTestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPsychologicalTestsResponse.ProtoReflect.Descriptor instead.
func (*ListPsychologicalTestsResponse) Descriptor() ([]byte, []int) {
	return file_admin_panel_v1_admin_panel_proto_rawDescGZIP(), []int{16}
}

func (x *ListPsychologicalTestsResponse) GetPsychologicalTests() []*PsychologicalTest {
	if x != nil {
		return x.PsychologicalTests
	}
	return nil
}

func (x *ListPsychologicalTestsResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type Question struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	NextQuestionId string `protobuf:"bytes,2,opt,name=next_question_id,json=nextQuestionId,proto3" json:"next_question_id,omitempty"`
	Number         int32  `protobuf:"varint,3,opt,name=number,proto3" json:"number,omitempty"`
	FirstAnswerId  string `protobuf:"bytes,4,opt,name=first_answer_id,json=firstAnswerId,proto3" json:"first_answer_id,omitempty"`
	Title          string `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *Question) Reset() {
	*x = Question{}
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Question) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Question) ProtoMessage() {}

func (x *Question) ProtoReflect() protoreflect.Message {
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Question.ProtoReflect.Descriptor instead.
func (*Question) Descriptor() ([]byte, []int) {
	return file_admin_panel_v1_admin_panel_proto_rawDescGZIP(), []int{17}
}

func (x *Question) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Question) GetNextQuestionId() string {
	if x != nil {
		return x.NextQuestionId
	}
	return ""
}

func (x *Question) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *Question) GetFirstAnswerId() string {
	if x != nil {
		return x.FirstAnswerId
	}
	return ""
}

func (x *Question) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type CreateQuestionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextQuestionId string `protobuf:"bytes,1,opt,name=next_question_id,json=nextQuestionId,proto3" json:"next_question_id,omitempty"`
	Number         int32  `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	FirstAnswerId  string `protobuf:"bytes,3,opt,name=first_answer_id,json=firstAnswerId,proto3" json:"first_answer_id,omitempty"`
	Title          string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *CreateQuestionRequest) Reset() {
	*x = CreateQuestionRequest{}
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQuestionRequest) ProtoMessage() {}

func (x *CreateQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQuestionRequest.ProtoReflect.Descriptor instead.
func (*CreateQuestionRequest) Descriptor() ([]byte, []int) {
	return file_admin_panel_v1_admin_panel_proto_rawDescGZIP(), []int{18}
}

func (x *CreateQuestionRequest) GetNextQuestionId() string {
	if x != nil {
		return x.NextQuestionId
	}
	return ""
}

func (x *CreateQuestionRequest) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *CreateQuestionRequest) GetFirstAnswerId() string {
	if x != nil {
		return x.FirstAnswerId
	}
	return ""
}

func (x *CreateQuestionRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type GetQuestionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetQuestionRequest) Reset() {
	*x = GetQuestionRequest{}
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuestionRequest) ProtoMessage() {}

func (x *GetQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuestionRequest.ProtoReflect.Descriptor instead.
func (*GetQuestionRequest) Descriptor() ([]byte, []int) {
	return file_admin_panel_v1_admin_panel_proto_rawDescGZIP(), []int{19}
}

func (x *GetQuestionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type QuestionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Question *Question `protobuf:"bytes,1,opt,name=question,proto3" json:"question,omitempty"`
	Errors   []*Error  `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *QuestionResponse) Reset() {
	*x = QuestionResponse{}
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuestionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionResponse) ProtoMessage() {}

func (x *QuestionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionResponse.ProtoReflect.Descriptor instead.
func (*QuestionResponse) Descriptor() ([]byte, []int) {
	return file_admin_panel_v1_admin_panel_proto_rawDescGZIP(), []int{20}
}

func (x *QuestionResponse) GetQuestion() *Question {
	if x != nil {
		return x.Question
	}
	return nil
}

func (x *QuestionResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type ListQuestionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListQuestionsRequest) Reset() {
	*x = ListQuestionsRequest{}
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListQuestionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQuestionsRequest) ProtoMessage() {}

func (x *ListQuestionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQuestionsRequest.ProtoReflect.Descriptor instead.
func (*ListQuestionsRequest) Descriptor() ([]byte, []int) {
	return file_admin_panel_v1_admin_panel_proto_rawDescGZIP(), []int{21}
}

type ListQuestionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Questions []*Question `protobuf:"bytes,1,rep,name=questions,proto3" json:"questions,omitempty"`
	Errors    []*Error    `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *ListQuestionsResponse) Reset() {
	*x = ListQuestionsResponse{}
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListQuestionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQuestionsResponse) ProtoMessage() {}

func (x *ListQuestionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQuestionsResponse.ProtoReflect.Descriptor instead.
func (*ListQuestionsResponse) Descriptor() ([]byte, []int) {
	return file_admin_panel_v1_admin_panel_proto_rawDescGZIP(), []int{22}
}

func (x *ListQuestionsResponse) GetQuestions() []*Question {
	if x != nil {
		return x.Questions
	}
	return nil
}

func (x *ListQuestionsResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type Answer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	NextAnswerId string `protobuf:"bytes,2,opt,name=next_answer_id,json=nextAnswerId,proto3" json:"next_answer_id,omitempty"`
	Title        string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *Answer) Reset() {
	*x = Answer{}
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Answer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Answer) ProtoMessage() {}

func (x *Answer) ProtoReflect() protoreflect.Message {
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Answer.ProtoReflect.Descriptor instead.
func (*Answer) Descriptor() ([]byte, []int) {
	return file_admin_panel_v1_admin_panel_proto_rawDescGZIP(), []int{23}
}

func (x *Answer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Answer) GetNextAnswerId() string {
	if x != nil {
		return x.NextAnswerId
	}
	return ""
}

func (x *Answer) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type CreateAnswerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextAnswerId string `protobuf:"bytes,1,opt,name=next_answer_id,json=nextAnswerId,proto3" json:"next_answer_id,omitempty"`
	Title        string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *CreateAnswerRequest) Reset() {
	*x = CreateAnswerRequest{}
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAnswerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAnswerRequest) ProtoMessage() {}

func (x *CreateAnswerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAnswerRequest.ProtoReflect.Descriptor instead.
func (*CreateAnswerRequest) Descriptor() ([]byte, []int) {
	return file_admin_panel_v1_admin_panel_proto_rawDescGZIP(), []int{24}
}

func (x *CreateAnswerRequest) GetNextAnswerId() string {
	if x != nil {
		return x.NextAnswerId
	}
	return ""
}

func (x *CreateAnswerRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type GetAnswerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetAnswerRequest) Reset() {
	*x = GetAnswerRequest{}
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAnswerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAnswerRequest) ProtoMessage() {}

func (x *GetAnswerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAnswerRequest.ProtoReflect.Descriptor instead.
func (*GetAnswerRequest) Descriptor() ([]byte, []int) {
	return file_admin_panel_v1_admin_panel_proto_rawDescGZIP(), []int{25}
}

func (x *GetAnswerRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type AnswerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Answer *Answer  `protobuf:"bytes,1,opt,name=answer,proto3" json:"answer,omitempty"`
	Errors []*Error `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *AnswerResponse) Reset() {
	*x = AnswerResponse{}
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnswerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerResponse) ProtoMessage() {}

func (x *AnswerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerResponse.ProtoReflect.Descriptor instead.
func (*AnswerResponse) Descriptor() ([]byte, []int) {
	return file_admin_panel_v1_admin_panel_proto_rawDescGZIP(), []int{26}
}

func (x *AnswerResponse) GetAnswer() *Answer {
	if x != nil {
		return x.Answer
	}
	return nil
}

func (x *AnswerResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type ListAnswersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListAnswersRequest) Reset() {
	*x = ListAnswersRequest{}
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAnswersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAnswersRequest) ProtoMessage() {}

func (x *ListAnswersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAnswersRequest.ProtoReflect.Descriptor instead.
func (*ListAnswersRequest) Descriptor() ([]byte, []int) {
	return file_admin_panel_v1_admin_panel_proto_rawDescGZIP(), []int{27}
}

type ListAnswersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Answers []*Answer `protobuf:"bytes,1,rep,name=answers,proto3" json:"answers,omitempty"`
	Errors  []*Error  `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *ListAnswersResponse) Reset() {
	*x = ListAnswersResponse{}
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAnswersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAnswersResponse) ProtoMessage() {}

func (x *ListAnswersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAnswersResponse.ProtoReflect.Descriptor instead.
func (*ListAnswersResponse) Descriptor() ([]byte, []int) {
	return file_admin_panel_v1_admin_panel_proto_rawDescGZIP(), []int{28}
}

func (x *ListAnswersResponse) GetAnswers() []*Answer {
	if x != nil {
		return x.Answers
	}
	return nil
}

func (x *ListAnswersResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type PsychologicalPerformance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OwnerId             string `protobuf:"bytes,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	PsychologicalTestId string `protobuf:"bytes,3,opt,name=psychological_test_id,json=psychologicalTestId,proto3" json:"psychological_test_id,omitempty"`
	StartedAt           string `protobuf:"bytes,4,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"` // Use ISO 8601 format (e.g., "2024-11-12T08:00:00Z")
}

func (x *PsychologicalPerformance) Reset() {
	*x = PsychologicalPerformance{}
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PsychologicalPerformance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PsychologicalPerformance) ProtoMessage() {}

func (x *PsychologicalPerformance) ProtoReflect() protoreflect.Message {
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PsychologicalPerformance.ProtoReflect.Descriptor instead.
func (*PsychologicalPerformance) Descriptor() ([]byte, []int) {
	return file_admin_panel_v1_admin_panel_proto_rawDescGZIP(), []int{29}
}

func (x *PsychologicalPerformance) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PsychologicalPerformance) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *PsychologicalPerformance) GetPsychologicalTestId() string {
	if x != nil {
		return x.PsychologicalTestId
	}
	return ""
}

func (x *PsychologicalPerformance) GetStartedAt() string {
	if x != nil {
		return x.StartedAt
	}
	return ""
}

type CreatePsychologicalPerformanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId             string `protobuf:"bytes,1,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	PsychologicalTestId string `protobuf:"bytes,2,opt,name=psychological_test_id,json=psychologicalTestId,proto3" json:"psychological_test_id,omitempty"`
	StartedAt           string `protobuf:"bytes,3,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"` // Use ISO 8601 format
}

func (x *CreatePsychologicalPerformanceRequest) Reset() {
	*x = CreatePsychologicalPerformanceRequest{}
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePsychologicalPerformanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePsychologicalPerformanceRequest) ProtoMessage() {}

func (x *CreatePsychologicalPerformanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePsychologicalPerformanceRequest.ProtoReflect.Descriptor instead.
func (*CreatePsychologicalPerformanceRequest) Descriptor() ([]byte, []int) {
	return file_admin_panel_v1_admin_panel_proto_rawDescGZIP(), []int{30}
}

func (x *CreatePsychologicalPerformanceRequest) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *CreatePsychologicalPerformanceRequest) GetPsychologicalTestId() string {
	if x != nil {
		return x.PsychologicalTestId
	}
	return ""
}

func (x *CreatePsychologicalPerformanceRequest) GetStartedAt() string {
	if x != nil {
		return x.StartedAt
	}
	return ""
}

type GetPsychologicalPerformanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetPsychologicalPerformanceRequest) Reset() {
	*x = GetPsychologicalPerformanceRequest{}
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPsychologicalPerformanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPsychologicalPerformanceRequest) ProtoMessage() {}

func (x *GetPsychologicalPerformanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPsychologicalPerformanceRequest.ProtoReflect.Descriptor instead.
func (*GetPsychologicalPerformanceRequest) Descriptor() ([]byte, []int) {
	return file_admin_panel_v1_admin_panel_proto_rawDescGZIP(), []int{31}
}

func (x *GetPsychologicalPerformanceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type PsychologicalPerformanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PsychologicalPerformance *PsychologicalPerformance `protobuf:"bytes,1,opt,name=psychological_performance,json=psychologicalPerformance,proto3" json:"psychological_performance,omitempty"`
	Errors                   []*Error                  `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *PsychologicalPerformanceResponse) Reset() {
	*x = PsychologicalPerformanceResponse{}
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PsychologicalPerformanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PsychologicalPerformanceResponse) ProtoMessage() {}

func (x *PsychologicalPerformanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PsychologicalPerformanceResponse.ProtoReflect.Descriptor instead.
func (*PsychologicalPerformanceResponse) Descriptor() ([]byte, []int) {
	return file_admin_panel_v1_admin_panel_proto_rawDescGZIP(), []int{32}
}

func (x *PsychologicalPerformanceResponse) GetPsychologicalPerformance() *PsychologicalPerformance {
	if x != nil {
		return x.PsychologicalPerformance
	}
	return nil
}

func (x *PsychologicalPerformanceResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type ListPsychologicalPerformancesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListPsychologicalPerformancesRequest) Reset() {
	*x = ListPsychologicalPerformancesRequest{}
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPsychologicalPerformancesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPsychologicalPerformancesRequest) ProtoMessage() {}

func (x *ListPsychologicalPerformancesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPsychologicalPerformancesRequest.ProtoReflect.Descriptor instead.
func (*ListPsychologicalPerformancesRequest) Descriptor() ([]byte, []int) {
	return file_admin_panel_v1_admin_panel_proto_rawDescGZIP(), []int{33}
}

type ListPsychologicalPerformancesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PsychologicalPerformances []*PsychologicalPerformance `protobuf:"bytes,1,rep,name=psychological_performances,json=psychologicalPerformances,proto3" json:"psychological_performances,omitempty"`
	Errors                    []*Error                    `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *ListPsychologicalPerformancesResponse) Reset() {
	*x = ListPsychologicalPerformancesResponse{}
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPsychologicalPerformancesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPsychologicalPerformancesResponse) ProtoMessage() {}

func (x *ListPsychologicalPerformancesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_panel_v1_admin_panel_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPsychologicalPerformancesResponse.ProtoReflect.Descriptor instead.
func (*ListPsychologicalPerformancesResponse) Descriptor() ([]byte, []int) {
	return file_admin_panel_v1_admin_panel_proto_rawDescGZIP(), []int{34}
}

func (x *ListPsychologicalPerformancesResponse) GetPsychologicalPerformances() []*PsychologicalPerformance {
	if x != nil {
		return x.PsychologicalPerformances
	}
	return nil
}

func (x *ListPsychologicalPerformancesResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

var File_admin_panel_v1_admin_panel_proto protoreflect.FileDescriptor

var file_admin_panel_v1_admin_panel_proto_rawDesc = []byte{
	0x0a, 0x20, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1d, 0x0a,
	0x0b, 0x50, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2f, 0x0a, 0x17,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x69, 0x70, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x7f, 0x0a,
	0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x69, 0x70, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x64, 0x69, 0x73,
	0x63, 0x69, 0x70, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x44, 0x69, 0x73, 0x63,
	0x69, 0x70, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x69, 0x70, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x24,
	0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x1b, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x00, 0x22, 0x32, 0x0a, 0x0a, 0x44, 0x69, 0x73, 0x63, 0x69, 0x70, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x39, 0x0a, 0x11, 0x50, 0x73, 0x79, 0x63,
	0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x22, 0x36, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x73, 0x79,
	0x63, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x2d, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x50, 0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x19, 0x50,
	0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x12, 0x70, 0x73, 0x79, 0x63,
	0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e,
	0x65, 0x6c, 0x2e, 0x50, 0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x70, 0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f,
	0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x22, 0x1f, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x73, 0x79, 0x63, 0x68,
	0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x9d, 0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x73, 0x79,
	0x63, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x13, 0x70, 0x73, 0x79, 0x63, 0x68,
	0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e,
	0x65, 0x6c, 0x2e, 0x50, 0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x70, 0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x11, 0x50, 0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x96, 0x01, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x73, 0x79, 0x63, 0x68,
	0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x50, 0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x19, 0x50, 0x73, 0x79,
	0x63, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x12, 0x70, 0x73, 0x79, 0x63, 0x68, 0x6f,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c,
	0x2e, 0x50, 0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x11, 0x70, 0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x54, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61,
	0x6e, 0x65, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x22, 0x1f, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x9d, 0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x73, 0x79, 0x63, 0x68,
	0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x13, 0x70, 0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c,
	0x2e, 0x50, 0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x12, 0x70, 0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x54, 0x65, 0x73, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70,
	0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22,
	0x97, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x69, 0x72, 0x73, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x24, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x71, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61,
	0x6e, 0x65, 0x6c, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70,
	0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x22, 0x16, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x78, 0x0a, 0x15, 0x4c, 0x69,
	0x73, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70,
	0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x22, 0x54, 0x0a, 0x06, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x51, 0x0a, 0x13, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x22, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x69, 0x0a, 0x0e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x65,
	0x6c, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x12, 0x2a, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x14, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x70, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52,
	0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x22, 0x98, 0x01, 0x0a, 0x18, 0x50, 0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15,
	0x70, 0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x73, 0x79,
	0x63, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0x95, 0x01, 0x0a, 0x25, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x73, 0x79, 0x63, 0x68, 0x6f,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x34, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x50, 0x73,
	0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb2, 0x01,
	0x0a, 0x20, 0x50, 0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x62, 0x0a, 0x19, 0x70, 0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61,
	0x6e, 0x65, 0x6c, 0x2e, 0x50, 0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x18, 0x70, 0x73,
	0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70,
	0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x22, 0x26, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x73, 0x79, 0x63, 0x68, 0x6f,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xb9, 0x01, 0x0a, 0x25, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x1a, 0x70, 0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x50, 0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x19, 0x70, 0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x32, 0xc6, 0x0d, 0x0a, 0x0a, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x50, 0x61, 0x6e, 0x65, 0x6c, 0x12, 0x49, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x50, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x18, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f,
	0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x0d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x07, 0x12, 0x05, 0x2f, 0x70, 0x69, 0x6e, 0x67,
	0x12, 0x5f, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x69, 0x70,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x24, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e,
	0x65, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x69, 0x70, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x69, 0x73, 0x63, 0x69, 0x70, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x6e, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x73, 0x79, 0x63, 0x68,
	0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x50, 0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x68, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x73, 0x79, 0x63, 0x68,
	0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x65,
	0x6c, 0x2e, 0x50, 0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x16, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61,
	0x6e, 0x65, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e,
	0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x73,
	0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70,
	0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x50, 0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x12, 0x28, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70,
	0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x50,
	0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x65, 0x73,
	0x74, 0x73, 0x12, 0x2a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x65,
	0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4d, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x47, 0x65,
	0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x56, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x21, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x65,
	0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f,
	0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x65,
	0x6c, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c,
	0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x50, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x12, 0x1f,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x83, 0x01, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x73, 0x79, 0x63,
	0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x32, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e,
	0x65, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x50, 0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7d, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x50, 0x73,
	0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2f, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70,
	0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f,
	0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x50, 0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x31, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x73, 0x79, 0x63, 0x68,
	0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x73,
	0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x41, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x75,
	0x72, 0x74, 0x72, 0x69, 0x6b, 0x61, 0x2f, 0x55, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x6b, 0x61, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2f, 0x76, 0x31, 0x3b,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_admin_panel_v1_admin_panel_proto_rawDescOnce sync.Once
	file_admin_panel_v1_admin_panel_proto_rawDescData = file_admin_panel_v1_admin_panel_proto_rawDesc
)

func file_admin_panel_v1_admin_panel_proto_rawDescGZIP() []byte {
	file_admin_panel_v1_admin_panel_proto_rawDescOnce.Do(func() {
		file_admin_panel_v1_admin_panel_proto_rawDescData = protoimpl.X.CompressGZIP(file_admin_panel_v1_admin_panel_proto_rawDescData)
	})
	return file_admin_panel_v1_admin_panel_proto_rawDescData
}

var file_admin_panel_v1_admin_panel_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_admin_panel_v1_admin_panel_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_admin_panel_v1_admin_panel_proto_goTypes = []any{
	(Error_Code)(0),                               // 0: admin_panel.Error.Code
	(*PingMessage)(nil),                           // 1: admin_panel.PingMessage
	(*CreateDisciplineRequest)(nil),               // 2: admin_panel.CreateDisciplineRequest
	(*CreateDisciplineResponse)(nil),              // 3: admin_panel.CreateDisciplineResponse
	(*Error)(nil),                                 // 4: admin_panel.Error
	(*Discipline)(nil),                            // 5: admin_panel.Discipline
	(*PsychologicalType)(nil),                     // 6: admin_panel.PsychologicalType
	(*CreatePsychologicalTypeRequest)(nil),        // 7: admin_panel.CreatePsychologicalTypeRequest
	(*GetPsychologicalTypeRequest)(nil),           // 8: admin_panel.GetPsychologicalTypeRequest
	(*PsychologicalTypeResponse)(nil),             // 9: admin_panel.PsychologicalTypeResponse
	(*ListPsychologicalTypesRequest)(nil),         // 10: admin_panel.ListPsychologicalTypesRequest
	(*ListPsychologicalTypesResponse)(nil),        // 11: admin_panel.ListPsychologicalTypesResponse
	(*PsychologicalTest)(nil),                     // 12: admin_panel.PsychologicalTest
	(*CreatePsychologicalTestRequest)(nil),        // 13: admin_panel.CreatePsychologicalTestRequest
	(*GetPsychologicalTestRequest)(nil),           // 14: admin_panel.GetPsychologicalTestRequest
	(*PsychologicalTestResponse)(nil),             // 15: admin_panel.PsychologicalTestResponse
	(*ListPsychologicalTestsRequest)(nil),         // 16: admin_panel.ListPsychologicalTestsRequest
	(*ListPsychologicalTestsResponse)(nil),        // 17: admin_panel.ListPsychologicalTestsResponse
	(*Question)(nil),                              // 18: admin_panel.Question
	(*CreateQuestionRequest)(nil),                 // 19: admin_panel.CreateQuestionRequest
	(*GetQuestionRequest)(nil),                    // 20: admin_panel.GetQuestionRequest
	(*QuestionResponse)(nil),                      // 21: admin_panel.QuestionResponse
	(*ListQuestionsRequest)(nil),                  // 22: admin_panel.ListQuestionsRequest
	(*ListQuestionsResponse)(nil),                 // 23: admin_panel.ListQuestionsResponse
	(*Answer)(nil),                                // 24: admin_panel.Answer
	(*CreateAnswerRequest)(nil),                   // 25: admin_panel.CreateAnswerRequest
	(*GetAnswerRequest)(nil),                      // 26: admin_panel.GetAnswerRequest
	(*AnswerResponse)(nil),                        // 27: admin_panel.AnswerResponse
	(*ListAnswersRequest)(nil),                    // 28: admin_panel.ListAnswersRequest
	(*ListAnswersResponse)(nil),                   // 29: admin_panel.ListAnswersResponse
	(*PsychologicalPerformance)(nil),              // 30: admin_panel.PsychologicalPerformance
	(*CreatePsychologicalPerformanceRequest)(nil), // 31: admin_panel.CreatePsychologicalPerformanceRequest
	(*GetPsychologicalPerformanceRequest)(nil),    // 32: admin_panel.GetPsychologicalPerformanceRequest
	(*PsychologicalPerformanceResponse)(nil),      // 33: admin_panel.PsychologicalPerformanceResponse
	(*ListPsychologicalPerformancesRequest)(nil),  // 34: admin_panel.ListPsychologicalPerformancesRequest
	(*ListPsychologicalPerformancesResponse)(nil), // 35: admin_panel.ListPsychologicalPerformancesResponse
}
var file_admin_panel_v1_admin_panel_proto_depIdxs = []int32{
	5,  // 0: admin_panel.CreateDisciplineResponse.discipline:type_name -> admin_panel.Discipline
	4,  // 1: admin_panel.CreateDisciplineResponse.errors:type_name -> admin_panel.Error
	6,  // 2: admin_panel.PsychologicalTypeResponse.psychological_type:type_name -> admin_panel.PsychologicalType
	4,  // 3: admin_panel.PsychologicalTypeResponse.errors:type_name -> admin_panel.Error
	6,  // 4: admin_panel.ListPsychologicalTypesResponse.psychological_types:type_name -> admin_panel.PsychologicalType
	4,  // 5: admin_panel.ListPsychologicalTypesResponse.errors:type_name -> admin_panel.Error
	12, // 6: admin_panel.PsychologicalTestResponse.psychological_test:type_name -> admin_panel.PsychologicalTest
	4,  // 7: admin_panel.PsychologicalTestResponse.errors:type_name -> admin_panel.Error
	12, // 8: admin_panel.ListPsychologicalTestsResponse.psychological_tests:type_name -> admin_panel.PsychologicalTest
	4,  // 9: admin_panel.ListPsychologicalTestsResponse.errors:type_name -> admin_panel.Error
	18, // 10: admin_panel.QuestionResponse.question:type_name -> admin_panel.Question
	4,  // 11: admin_panel.QuestionResponse.errors:type_name -> admin_panel.Error
	18, // 12: admin_panel.ListQuestionsResponse.questions:type_name -> admin_panel.Question
	4,  // 13: admin_panel.ListQuestionsResponse.errors:type_name -> admin_panel.Error
	24, // 14: admin_panel.AnswerResponse.answer:type_name -> admin_panel.Answer
	4,  // 15: admin_panel.AnswerResponse.errors:type_name -> admin_panel.Error
	24, // 16: admin_panel.ListAnswersResponse.answers:type_name -> admin_panel.Answer
	4,  // 17: admin_panel.ListAnswersResponse.errors:type_name -> admin_panel.Error
	30, // 18: admin_panel.PsychologicalPerformanceResponse.psychological_performance:type_name -> admin_panel.PsychologicalPerformance
	4,  // 19: admin_panel.PsychologicalPerformanceResponse.errors:type_name -> admin_panel.Error
	30, // 20: admin_panel.ListPsychologicalPerformancesResponse.psychological_performances:type_name -> admin_panel.PsychologicalPerformance
	4,  // 21: admin_panel.ListPsychologicalPerformancesResponse.errors:type_name -> admin_panel.Error
	1,  // 22: admin_panel.AdminPanel.Ping:input_type -> admin_panel.PingMessage
	2,  // 23: admin_panel.AdminPanel.CreateDiscipline:input_type -> admin_panel.CreateDisciplineRequest
	7,  // 24: admin_panel.AdminPanel.CreatePsychologicalType:input_type -> admin_panel.CreatePsychologicalTypeRequest
	8,  // 25: admin_panel.AdminPanel.GetPsychologicalType:input_type -> admin_panel.GetPsychologicalTypeRequest
	10, // 26: admin_panel.AdminPanel.ListPsychologicalTypes:input_type -> admin_panel.ListPsychologicalTypesRequest
	13, // 27: admin_panel.AdminPanel.CreatePsychologicalTest:input_type -> admin_panel.CreatePsychologicalTestRequest
	14, // 28: admin_panel.AdminPanel.GetPsychologicalTest:input_type -> admin_panel.GetPsychologicalTestRequest
	16, // 29: admin_panel.AdminPanel.ListPsychologicalTests:input_type -> admin_panel.ListPsychologicalTestsRequest
	19, // 30: admin_panel.AdminPanel.CreateQuestion:input_type -> admin_panel.CreateQuestionRequest
	20, // 31: admin_panel.AdminPanel.GetQuestion:input_type -> admin_panel.GetQuestionRequest
	22, // 32: admin_panel.AdminPanel.ListQuestions:input_type -> admin_panel.ListQuestionsRequest
	25, // 33: admin_panel.AdminPanel.CreateAnswer:input_type -> admin_panel.CreateAnswerRequest
	26, // 34: admin_panel.AdminPanel.GetAnswer:input_type -> admin_panel.GetAnswerRequest
	28, // 35: admin_panel.AdminPanel.ListAnswers:input_type -> admin_panel.ListAnswersRequest
	31, // 36: admin_panel.AdminPanel.CreatePsychologicalPerformance:input_type -> admin_panel.CreatePsychologicalPerformanceRequest
	32, // 37: admin_panel.AdminPanel.GetPsychologicalPerformance:input_type -> admin_panel.GetPsychologicalPerformanceRequest
	34, // 38: admin_panel.AdminPanel.ListPsychologicalPerformances:input_type -> admin_panel.ListPsychologicalPerformancesRequest
	1,  // 39: admin_panel.AdminPanel.Ping:output_type -> admin_panel.PingMessage
	3,  // 40: admin_panel.AdminPanel.CreateDiscipline:output_type -> admin_panel.CreateDisciplineResponse
	9,  // 41: admin_panel.AdminPanel.CreatePsychologicalType:output_type -> admin_panel.PsychologicalTypeResponse
	9,  // 42: admin_panel.AdminPanel.GetPsychologicalType:output_type -> admin_panel.PsychologicalTypeResponse
	11, // 43: admin_panel.AdminPanel.ListPsychologicalTypes:output_type -> admin_panel.ListPsychologicalTypesResponse
	15, // 44: admin_panel.AdminPanel.CreatePsychologicalTest:output_type -> admin_panel.PsychologicalTestResponse
	15, // 45: admin_panel.AdminPanel.GetPsychologicalTest:output_type -> admin_panel.PsychologicalTestResponse
	17, // 46: admin_panel.AdminPanel.ListPsychologicalTests:output_type -> admin_panel.ListPsychologicalTestsResponse
	21, // 47: admin_panel.AdminPanel.CreateQuestion:output_type -> admin_panel.QuestionResponse
	21, // 48: admin_panel.AdminPanel.GetQuestion:output_type -> admin_panel.QuestionResponse
	23, // 49: admin_panel.AdminPanel.ListQuestions:output_type -> admin_panel.ListQuestionsResponse
	27, // 50: admin_panel.AdminPanel.CreateAnswer:output_type -> admin_panel.AnswerResponse
	27, // 51: admin_panel.AdminPanel.GetAnswer:output_type -> admin_panel.AnswerResponse
	29, // 52: admin_panel.AdminPanel.ListAnswers:output_type -> admin_panel.ListAnswersResponse
	33, // 53: admin_panel.AdminPanel.CreatePsychologicalPerformance:output_type -> admin_panel.PsychologicalPerformanceResponse
	33, // 54: admin_panel.AdminPanel.GetPsychologicalPerformance:output_type -> admin_panel.PsychologicalPerformanceResponse
	35, // 55: admin_panel.AdminPanel.ListPsychologicalPerformances:output_type -> admin_panel.ListPsychologicalPerformancesResponse
	39, // [39:56] is the sub-list for method output_type
	22, // [22:39] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_admin_panel_v1_admin_panel_proto_init() }
func file_admin_panel_v1_admin_panel_proto_init() {
	if File_admin_panel_v1_admin_panel_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_admin_panel_v1_admin_panel_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_admin_panel_v1_admin_panel_proto_goTypes,
		DependencyIndexes: file_admin_panel_v1_admin_panel_proto_depIdxs,
		EnumInfos:         file_admin_panel_v1_admin_panel_proto_enumTypes,
		MessageInfos:      file_admin_panel_v1_admin_panel_proto_msgTypes,
	}.Build()
	File_admin_panel_v1_admin_panel_proto = out.File
	file_admin_panel_v1_admin_panel_proto_rawDesc = nil
	file_admin_panel_v1_admin_panel_proto_goTypes = nil
	file_admin_panel_v1_admin_panel_proto_depIdxs = nil
}
