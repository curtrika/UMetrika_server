// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: admin_panel/v1/admin_panel.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AdminPanel_Ping_FullMethodName             = "/admin_panel.AdminPanel/Ping"
	AdminPanel_CreateDiscipline_FullMethodName = "/admin_panel.AdminPanel/CreateDiscipline"
	AdminPanel_CreateUser_FullMethodName       = "/admin_panel.AdminPanel/CreateUser"
)

// AdminPanelClient is the client API for AdminPanel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AdminPanel is service for managing school info and users
type AdminPanelClient interface {
	Ping(ctx context.Context, in *PingMessage, opts ...grpc.CallOption) (*PingMessage, error)
	CreateDiscipline(ctx context.Context, in *CreateDisciplineRequest, opts ...grpc.CallOption) (*CreateDisciplineResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
}

type adminPanelClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminPanelClient(cc grpc.ClientConnInterface) AdminPanelClient {
	return &adminPanelClient{cc}
}

func (c *adminPanelClient) Ping(ctx context.Context, in *PingMessage, opts ...grpc.CallOption) (*PingMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingMessage)
	err := c.cc.Invoke(ctx, AdminPanel_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelClient) CreateDiscipline(ctx context.Context, in *CreateDisciplineRequest, opts ...grpc.CallOption) (*CreateDisciplineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDisciplineResponse)
	err := c.cc.Invoke(ctx, AdminPanel_CreateDiscipline_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, AdminPanel_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminPanelServer is the server API for AdminPanel service.
// All implementations must embed UnimplementedAdminPanelServer
// for forward compatibility.
//
// AdminPanel is service for managing school info and users
type AdminPanelServer interface {
	Ping(context.Context, *PingMessage) (*PingMessage, error)
	CreateDiscipline(context.Context, *CreateDisciplineRequest) (*CreateDisciplineResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	mustEmbedUnimplementedAdminPanelServer()
}

// UnimplementedAdminPanelServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdminPanelServer struct{}

func (UnimplementedAdminPanelServer) Ping(context.Context, *PingMessage) (*PingMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedAdminPanelServer) CreateDiscipline(context.Context, *CreateDisciplineRequest) (*CreateDisciplineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDiscipline not implemented")
}
func (UnimplementedAdminPanelServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedAdminPanelServer) mustEmbedUnimplementedAdminPanelServer() {}
func (UnimplementedAdminPanelServer) testEmbeddedByValue()                    {}

// UnsafeAdminPanelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminPanelServer will
// result in compilation errors.
type UnsafeAdminPanelServer interface {
	mustEmbedUnimplementedAdminPanelServer()
}

func RegisterAdminPanelServer(s grpc.ServiceRegistrar, srv AdminPanelServer) {
	// If the following call pancis, it indicates UnimplementedAdminPanelServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AdminPanel_ServiceDesc, srv)
}

func _AdminPanel_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminPanel_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).Ping(ctx, req.(*PingMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanel_CreateDiscipline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDisciplineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).CreateDiscipline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminPanel_CreateDiscipline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).CreateDiscipline(ctx, req.(*CreateDisciplineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanel_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminPanel_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminPanel_ServiceDesc is the grpc.ServiceDesc for AdminPanel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminPanel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin_panel.AdminPanel",
	HandlerType: (*AdminPanelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _AdminPanel_Ping_Handler,
		},
		{
			MethodName: "CreateDiscipline",
			Handler:    _AdminPanel_CreateDiscipline_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _AdminPanel_CreateUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin_panel/v1/admin_panel.proto",
}
