// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: admin_panel/v1/admin_panel.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AdminPanel_Ping_FullMethodName                           = "/admin_panel.AdminPanel/Ping"
	AdminPanel_CreateDiscipline_FullMethodName               = "/admin_panel.AdminPanel/CreateDiscipline"
	AdminPanel_CreatePsychologicalType_FullMethodName        = "/admin_panel.AdminPanel/CreatePsychologicalType"
	AdminPanel_GetPsychologicalType_FullMethodName           = "/admin_panel.AdminPanel/GetPsychologicalType"
	AdminPanel_ListPsychologicalTypes_FullMethodName         = "/admin_panel.AdminPanel/ListPsychologicalTypes"
	AdminPanel_CreatePsychologicalTest_FullMethodName        = "/admin_panel.AdminPanel/CreatePsychologicalTest"
	AdminPanel_GetPsychologicalTest_FullMethodName           = "/admin_panel.AdminPanel/GetPsychologicalTest"
	AdminPanel_ListPsychologicalTests_FullMethodName         = "/admin_panel.AdminPanel/ListPsychologicalTests"
	AdminPanel_CreateQuestion_FullMethodName                 = "/admin_panel.AdminPanel/CreateQuestion"
	AdminPanel_GetQuestion_FullMethodName                    = "/admin_panel.AdminPanel/GetQuestion"
	AdminPanel_ListQuestions_FullMethodName                  = "/admin_panel.AdminPanel/ListQuestions"
	AdminPanel_CreateAnswer_FullMethodName                   = "/admin_panel.AdminPanel/CreateAnswer"
	AdminPanel_GetAnswer_FullMethodName                      = "/admin_panel.AdminPanel/GetAnswer"
	AdminPanel_ListAnswers_FullMethodName                    = "/admin_panel.AdminPanel/ListAnswers"
	AdminPanel_CreatePsychologicalPerformance_FullMethodName = "/admin_panel.AdminPanel/CreatePsychologicalPerformance"
	AdminPanel_GetPsychologicalPerformance_FullMethodName    = "/admin_panel.AdminPanel/GetPsychologicalPerformance"
	AdminPanel_ListPsychologicalPerformances_FullMethodName  = "/admin_panel.AdminPanel/ListPsychologicalPerformances"
)

// AdminPanelClient is the client API for AdminPanel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AdminPanel is a service for managing school info, users, and psychological tests.
type AdminPanelClient interface {
	Ping(ctx context.Context, in *PingMessage, opts ...grpc.CallOption) (*PingMessage, error)
	CreateDiscipline(ctx context.Context, in *CreateDisciplineRequest, opts ...grpc.CallOption) (*CreateDisciplineResponse, error)
	// PsychologicalType RPCs
	CreatePsychologicalType(ctx context.Context, in *CreatePsychologicalTypeRequest, opts ...grpc.CallOption) (*PsychologicalTypeResponse, error)
	GetPsychologicalType(ctx context.Context, in *GetPsychologicalTypeRequest, opts ...grpc.CallOption) (*PsychologicalTypeResponse, error)
	ListPsychologicalTypes(ctx context.Context, in *ListPsychologicalTypesRequest, opts ...grpc.CallOption) (*ListPsychologicalTypesResponse, error)
	// PsychologicalTest RPCs
	CreatePsychologicalTest(ctx context.Context, in *CreatePsychologicalTestRequest, opts ...grpc.CallOption) (*PsychologicalTestResponse, error)
	GetPsychologicalTest(ctx context.Context, in *GetPsychologicalTestRequest, opts ...grpc.CallOption) (*PsychologicalTestResponse, error)
	ListPsychologicalTests(ctx context.Context, in *ListPsychologicalTestsRequest, opts ...grpc.CallOption) (*ListPsychologicalTestsResponse, error)
	// Question RPCs
	CreateQuestion(ctx context.Context, in *CreateQuestionRequest, opts ...grpc.CallOption) (*QuestionResponse, error)
	GetQuestion(ctx context.Context, in *GetQuestionRequest, opts ...grpc.CallOption) (*QuestionResponse, error)
	ListQuestions(ctx context.Context, in *ListQuestionsRequest, opts ...grpc.CallOption) (*ListQuestionsResponse, error)
	// Answer RPCs
	CreateAnswer(ctx context.Context, in *CreateAnswerRequest, opts ...grpc.CallOption) (*AnswerResponse, error)
	GetAnswer(ctx context.Context, in *GetAnswerRequest, opts ...grpc.CallOption) (*AnswerResponse, error)
	ListAnswers(ctx context.Context, in *ListAnswersRequest, opts ...grpc.CallOption) (*ListAnswersResponse, error)
	// PsychologicalPerformance RPCs
	CreatePsychologicalPerformance(ctx context.Context, in *CreatePsychologicalPerformanceRequest, opts ...grpc.CallOption) (*PsychologicalPerformanceResponse, error)
	GetPsychologicalPerformance(ctx context.Context, in *GetPsychologicalPerformanceRequest, opts ...grpc.CallOption) (*PsychologicalPerformanceResponse, error)
	ListPsychologicalPerformances(ctx context.Context, in *ListPsychologicalPerformancesRequest, opts ...grpc.CallOption) (*ListPsychologicalPerformancesResponse, error)
}

type adminPanelClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminPanelClient(cc grpc.ClientConnInterface) AdminPanelClient {
	return &adminPanelClient{cc}
}

func (c *adminPanelClient) Ping(ctx context.Context, in *PingMessage, opts ...grpc.CallOption) (*PingMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingMessage)
	err := c.cc.Invoke(ctx, AdminPanel_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelClient) CreateDiscipline(ctx context.Context, in *CreateDisciplineRequest, opts ...grpc.CallOption) (*CreateDisciplineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDisciplineResponse)
	err := c.cc.Invoke(ctx, AdminPanel_CreateDiscipline_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelClient) CreatePsychologicalType(ctx context.Context, in *CreatePsychologicalTypeRequest, opts ...grpc.CallOption) (*PsychologicalTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PsychologicalTypeResponse)
	err := c.cc.Invoke(ctx, AdminPanel_CreatePsychologicalType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelClient) GetPsychologicalType(ctx context.Context, in *GetPsychologicalTypeRequest, opts ...grpc.CallOption) (*PsychologicalTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PsychologicalTypeResponse)
	err := c.cc.Invoke(ctx, AdminPanel_GetPsychologicalType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelClient) ListPsychologicalTypes(ctx context.Context, in *ListPsychologicalTypesRequest, opts ...grpc.CallOption) (*ListPsychologicalTypesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPsychologicalTypesResponse)
	err := c.cc.Invoke(ctx, AdminPanel_ListPsychologicalTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelClient) CreatePsychologicalTest(ctx context.Context, in *CreatePsychologicalTestRequest, opts ...grpc.CallOption) (*PsychologicalTestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PsychologicalTestResponse)
	err := c.cc.Invoke(ctx, AdminPanel_CreatePsychologicalTest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelClient) GetPsychologicalTest(ctx context.Context, in *GetPsychologicalTestRequest, opts ...grpc.CallOption) (*PsychologicalTestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PsychologicalTestResponse)
	err := c.cc.Invoke(ctx, AdminPanel_GetPsychologicalTest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelClient) ListPsychologicalTests(ctx context.Context, in *ListPsychologicalTestsRequest, opts ...grpc.CallOption) (*ListPsychologicalTestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPsychologicalTestsResponse)
	err := c.cc.Invoke(ctx, AdminPanel_ListPsychologicalTests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelClient) CreateQuestion(ctx context.Context, in *CreateQuestionRequest, opts ...grpc.CallOption) (*QuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuestionResponse)
	err := c.cc.Invoke(ctx, AdminPanel_CreateQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelClient) GetQuestion(ctx context.Context, in *GetQuestionRequest, opts ...grpc.CallOption) (*QuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuestionResponse)
	err := c.cc.Invoke(ctx, AdminPanel_GetQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelClient) ListQuestions(ctx context.Context, in *ListQuestionsRequest, opts ...grpc.CallOption) (*ListQuestionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListQuestionsResponse)
	err := c.cc.Invoke(ctx, AdminPanel_ListQuestions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelClient) CreateAnswer(ctx context.Context, in *CreateAnswerRequest, opts ...grpc.CallOption) (*AnswerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnswerResponse)
	err := c.cc.Invoke(ctx, AdminPanel_CreateAnswer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelClient) GetAnswer(ctx context.Context, in *GetAnswerRequest, opts ...grpc.CallOption) (*AnswerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnswerResponse)
	err := c.cc.Invoke(ctx, AdminPanel_GetAnswer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelClient) ListAnswers(ctx context.Context, in *ListAnswersRequest, opts ...grpc.CallOption) (*ListAnswersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAnswersResponse)
	err := c.cc.Invoke(ctx, AdminPanel_ListAnswers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelClient) CreatePsychologicalPerformance(ctx context.Context, in *CreatePsychologicalPerformanceRequest, opts ...grpc.CallOption) (*PsychologicalPerformanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PsychologicalPerformanceResponse)
	err := c.cc.Invoke(ctx, AdminPanel_CreatePsychologicalPerformance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelClient) GetPsychologicalPerformance(ctx context.Context, in *GetPsychologicalPerformanceRequest, opts ...grpc.CallOption) (*PsychologicalPerformanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PsychologicalPerformanceResponse)
	err := c.cc.Invoke(ctx, AdminPanel_GetPsychologicalPerformance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelClient) ListPsychologicalPerformances(ctx context.Context, in *ListPsychologicalPerformancesRequest, opts ...grpc.CallOption) (*ListPsychologicalPerformancesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPsychologicalPerformancesResponse)
	err := c.cc.Invoke(ctx, AdminPanel_ListPsychologicalPerformances_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminPanelServer is the server API for AdminPanel service.
// All implementations must embed UnimplementedAdminPanelServer
// for forward compatibility.
//
// AdminPanel is a service for managing school info, users, and psychological tests.
type AdminPanelServer interface {
	Ping(context.Context, *PingMessage) (*PingMessage, error)
	CreateDiscipline(context.Context, *CreateDisciplineRequest) (*CreateDisciplineResponse, error)
	// PsychologicalType RPCs
	CreatePsychologicalType(context.Context, *CreatePsychologicalTypeRequest) (*PsychologicalTypeResponse, error)
	GetPsychologicalType(context.Context, *GetPsychologicalTypeRequest) (*PsychologicalTypeResponse, error)
	ListPsychologicalTypes(context.Context, *ListPsychologicalTypesRequest) (*ListPsychologicalTypesResponse, error)
	// PsychologicalTest RPCs
	CreatePsychologicalTest(context.Context, *CreatePsychologicalTestRequest) (*PsychologicalTestResponse, error)
	GetPsychologicalTest(context.Context, *GetPsychologicalTestRequest) (*PsychologicalTestResponse, error)
	ListPsychologicalTests(context.Context, *ListPsychologicalTestsRequest) (*ListPsychologicalTestsResponse, error)
	// Question RPCs
	CreateQuestion(context.Context, *CreateQuestionRequest) (*QuestionResponse, error)
	GetQuestion(context.Context, *GetQuestionRequest) (*QuestionResponse, error)
	ListQuestions(context.Context, *ListQuestionsRequest) (*ListQuestionsResponse, error)
	// Answer RPCs
	CreateAnswer(context.Context, *CreateAnswerRequest) (*AnswerResponse, error)
	GetAnswer(context.Context, *GetAnswerRequest) (*AnswerResponse, error)
	ListAnswers(context.Context, *ListAnswersRequest) (*ListAnswersResponse, error)
	// PsychologicalPerformance RPCs
	CreatePsychologicalPerformance(context.Context, *CreatePsychologicalPerformanceRequest) (*PsychologicalPerformanceResponse, error)
	GetPsychologicalPerformance(context.Context, *GetPsychologicalPerformanceRequest) (*PsychologicalPerformanceResponse, error)
	ListPsychologicalPerformances(context.Context, *ListPsychologicalPerformancesRequest) (*ListPsychologicalPerformancesResponse, error)
	mustEmbedUnimplementedAdminPanelServer()
}

// UnimplementedAdminPanelServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdminPanelServer struct{}

func (UnimplementedAdminPanelServer) Ping(context.Context, *PingMessage) (*PingMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedAdminPanelServer) CreateDiscipline(context.Context, *CreateDisciplineRequest) (*CreateDisciplineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDiscipline not implemented")
}
func (UnimplementedAdminPanelServer) CreatePsychologicalType(context.Context, *CreatePsychologicalTypeRequest) (*PsychologicalTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePsychologicalType not implemented")
}
func (UnimplementedAdminPanelServer) GetPsychologicalType(context.Context, *GetPsychologicalTypeRequest) (*PsychologicalTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPsychologicalType not implemented")
}
func (UnimplementedAdminPanelServer) ListPsychologicalTypes(context.Context, *ListPsychologicalTypesRequest) (*ListPsychologicalTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPsychologicalTypes not implemented")
}
func (UnimplementedAdminPanelServer) CreatePsychologicalTest(context.Context, *CreatePsychologicalTestRequest) (*PsychologicalTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePsychologicalTest not implemented")
}
func (UnimplementedAdminPanelServer) GetPsychologicalTest(context.Context, *GetPsychologicalTestRequest) (*PsychologicalTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPsychologicalTest not implemented")
}
func (UnimplementedAdminPanelServer) ListPsychologicalTests(context.Context, *ListPsychologicalTestsRequest) (*ListPsychologicalTestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPsychologicalTests not implemented")
}
func (UnimplementedAdminPanelServer) CreateQuestion(context.Context, *CreateQuestionRequest) (*QuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuestion not implemented")
}
func (UnimplementedAdminPanelServer) GetQuestion(context.Context, *GetQuestionRequest) (*QuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestion not implemented")
}
func (UnimplementedAdminPanelServer) ListQuestions(context.Context, *ListQuestionsRequest) (*ListQuestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQuestions not implemented")
}
func (UnimplementedAdminPanelServer) CreateAnswer(context.Context, *CreateAnswerRequest) (*AnswerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnswer not implemented")
}
func (UnimplementedAdminPanelServer) GetAnswer(context.Context, *GetAnswerRequest) (*AnswerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnswer not implemented")
}
func (UnimplementedAdminPanelServer) ListAnswers(context.Context, *ListAnswersRequest) (*ListAnswersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAnswers not implemented")
}
func (UnimplementedAdminPanelServer) CreatePsychologicalPerformance(context.Context, *CreatePsychologicalPerformanceRequest) (*PsychologicalPerformanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePsychologicalPerformance not implemented")
}
func (UnimplementedAdminPanelServer) GetPsychologicalPerformance(context.Context, *GetPsychologicalPerformanceRequest) (*PsychologicalPerformanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPsychologicalPerformance not implemented")
}
func (UnimplementedAdminPanelServer) ListPsychologicalPerformances(context.Context, *ListPsychologicalPerformancesRequest) (*ListPsychologicalPerformancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPsychologicalPerformances not implemented")
}
func (UnimplementedAdminPanelServer) mustEmbedUnimplementedAdminPanelServer() {}
func (UnimplementedAdminPanelServer) testEmbeddedByValue()                    {}

// UnsafeAdminPanelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminPanelServer will
// result in compilation errors.
type UnsafeAdminPanelServer interface {
	mustEmbedUnimplementedAdminPanelServer()
}

func RegisterAdminPanelServer(s grpc.ServiceRegistrar, srv AdminPanelServer) {
	// If the following call pancis, it indicates UnimplementedAdminPanelServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AdminPanel_ServiceDesc, srv)
}

func _AdminPanel_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminPanel_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).Ping(ctx, req.(*PingMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanel_CreateDiscipline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDisciplineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).CreateDiscipline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminPanel_CreateDiscipline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).CreateDiscipline(ctx, req.(*CreateDisciplineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanel_CreatePsychologicalType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePsychologicalTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).CreatePsychologicalType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminPanel_CreatePsychologicalType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).CreatePsychologicalType(ctx, req.(*CreatePsychologicalTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanel_GetPsychologicalType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPsychologicalTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).GetPsychologicalType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminPanel_GetPsychologicalType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).GetPsychologicalType(ctx, req.(*GetPsychologicalTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanel_ListPsychologicalTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPsychologicalTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).ListPsychologicalTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminPanel_ListPsychologicalTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).ListPsychologicalTypes(ctx, req.(*ListPsychologicalTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanel_CreatePsychologicalTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePsychologicalTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).CreatePsychologicalTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminPanel_CreatePsychologicalTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).CreatePsychologicalTest(ctx, req.(*CreatePsychologicalTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanel_GetPsychologicalTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPsychologicalTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).GetPsychologicalTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminPanel_GetPsychologicalTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).GetPsychologicalTest(ctx, req.(*GetPsychologicalTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanel_ListPsychologicalTests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPsychologicalTestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).ListPsychologicalTests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminPanel_ListPsychologicalTests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).ListPsychologicalTests(ctx, req.(*ListPsychologicalTestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanel_CreateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).CreateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminPanel_CreateQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).CreateQuestion(ctx, req.(*CreateQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanel_GetQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).GetQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminPanel_GetQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).GetQuestion(ctx, req.(*GetQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanel_ListQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQuestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).ListQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminPanel_ListQuestions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).ListQuestions(ctx, req.(*ListQuestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanel_CreateAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).CreateAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminPanel_CreateAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).CreateAnswer(ctx, req.(*CreateAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanel_GetAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).GetAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminPanel_GetAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).GetAnswer(ctx, req.(*GetAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanel_ListAnswers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAnswersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).ListAnswers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminPanel_ListAnswers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).ListAnswers(ctx, req.(*ListAnswersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanel_CreatePsychologicalPerformance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePsychologicalPerformanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).CreatePsychologicalPerformance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminPanel_CreatePsychologicalPerformance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).CreatePsychologicalPerformance(ctx, req.(*CreatePsychologicalPerformanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanel_GetPsychologicalPerformance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPsychologicalPerformanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).GetPsychologicalPerformance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminPanel_GetPsychologicalPerformance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).GetPsychologicalPerformance(ctx, req.(*GetPsychologicalPerformanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanel_ListPsychologicalPerformances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPsychologicalPerformancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).ListPsychologicalPerformances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminPanel_ListPsychologicalPerformances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).ListPsychologicalPerformances(ctx, req.(*ListPsychologicalPerformancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminPanel_ServiceDesc is the grpc.ServiceDesc for AdminPanel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminPanel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin_panel.AdminPanel",
	HandlerType: (*AdminPanelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _AdminPanel_Ping_Handler,
		},
		{
			MethodName: "CreateDiscipline",
			Handler:    _AdminPanel_CreateDiscipline_Handler,
		},
		{
			MethodName: "CreatePsychologicalType",
			Handler:    _AdminPanel_CreatePsychologicalType_Handler,
		},
		{
			MethodName: "GetPsychologicalType",
			Handler:    _AdminPanel_GetPsychologicalType_Handler,
		},
		{
			MethodName: "ListPsychologicalTypes",
			Handler:    _AdminPanel_ListPsychologicalTypes_Handler,
		},
		{
			MethodName: "CreatePsychologicalTest",
			Handler:    _AdminPanel_CreatePsychologicalTest_Handler,
		},
		{
			MethodName: "GetPsychologicalTest",
			Handler:    _AdminPanel_GetPsychologicalTest_Handler,
		},
		{
			MethodName: "ListPsychologicalTests",
			Handler:    _AdminPanel_ListPsychologicalTests_Handler,
		},
		{
			MethodName: "CreateQuestion",
			Handler:    _AdminPanel_CreateQuestion_Handler,
		},
		{
			MethodName: "GetQuestion",
			Handler:    _AdminPanel_GetQuestion_Handler,
		},
		{
			MethodName: "ListQuestions",
			Handler:    _AdminPanel_ListQuestions_Handler,
		},
		{
			MethodName: "CreateAnswer",
			Handler:    _AdminPanel_CreateAnswer_Handler,
		},
		{
			MethodName: "GetAnswer",
			Handler:    _AdminPanel_GetAnswer_Handler,
		},
		{
			MethodName: "ListAnswers",
			Handler:    _AdminPanel_ListAnswers_Handler,
		},
		{
			MethodName: "CreatePsychologicalPerformance",
			Handler:    _AdminPanel_CreatePsychologicalPerformance_Handler,
		},
		{
			MethodName: "GetPsychologicalPerformance",
			Handler:    _AdminPanel_GetPsychologicalPerformance_Handler,
		},
		{
			MethodName: "ListPsychologicalPerformances",
			Handler:    _AdminPanel_ListPsychologicalPerformances_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin_panel/v1/admin_panel.proto",
}
