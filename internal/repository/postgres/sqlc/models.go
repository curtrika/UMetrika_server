// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package postgres

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type QuestionType string

const (
	QuestionTypeMultipleChoice QuestionType = "multiple-choice"
	QuestionTypeRatingScale    QuestionType = "rating-scale"
	QuestionTypeOpenEnded      QuestionType = "open-ended"
	QuestionTypeTrueFalse      QuestionType = "true/false"
)

func (e *QuestionType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = QuestionType(s)
	case string:
		*e = QuestionType(s)
	default:
		return fmt.Errorf("unsupported scan type for QuestionType: %T", src)
	}
	return nil
}

type NullQuestionType struct {
	QuestionType QuestionType
	Valid        bool // Valid is true if QuestionType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullQuestionType) Scan(value interface{}) error {
	if value == nil {
		ns.QuestionType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.QuestionType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullQuestionType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.QuestionType), nil
}

type TestType string

const (
	TestTypeGraded      TestType = "graded"
	TestTypePractice    TestType = "practice"
	TestTypeSurvey      TestType = "survey"
	TestTypeDiagnostic  TestType = "diagnostic"
	TestTypeCognitive   TestType = "cognitive"
	TestTypePersonality TestType = "personality"
)

func (e *TestType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TestType(s)
	case string:
		*e = TestType(s)
	default:
		return fmt.Errorf("unsupported scan type for TestType: %T", src)
	}
	return nil
}

type NullTestType struct {
	TestType TestType
	Valid    bool // Valid is true if TestType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTestType) Scan(value interface{}) error {
	if value == nil {
		ns.TestType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TestType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTestType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TestType), nil
}

type Cause struct {
	ID        pgtype.UUID
	Title     string
	ProblemID pgtype.UUID
}

type Class struct {
	ID            pgtype.UUID
	Grade         int32
	Title         pgtype.Text
	MainTeacherID pgtype.UUID
	ReleaseDate   pgtype.Timestamp
	CreatedAt     pgtype.Timestamp
	UpdatedAt     pgtype.Timestamp
	DeletedAt     pgtype.Timestamp
}

type Discipline struct {
	ID   pgtype.UUID
	Name string
}

type EducationAnswer struct {
	AnswerID    pgtype.UUID
	QuestionID  pgtype.UUID
	AnswerText  string
	AnswerOrder int32
	ScoreValue  pgtype.Numeric
	CreatedAt   pgtype.Timestamp
}

type EducationGroup struct {
	GroupID     pgtype.UUID
	GroupName   string
	Description pgtype.Text
	CreatedAt   pgtype.Timestamp
}

type EducationOwner struct {
	OwnerID   pgtype.UUID
	OwnerName string
	PassHash  []byte
	Email     string
	CreatedAt pgtype.Timestamp
}

type EducationQuestion struct {
	QuestionID    pgtype.UUID
	TestID        pgtype.UUID
	QuestionText  string
	QuestionType  QuestionType
	QuestionOrder int32
	CreatedAt     pgtype.Timestamp
}

type EducationStudent struct {
	StudentID      pgtype.UUID
	StudentName    string
	Email          pgtype.Text
	DateOfBirth    pgtype.Date
	EnrollmentDate pgtype.Date
	GroupID        pgtype.UUID
	CreatedAt      pgtype.Timestamp
}

type EducationTest struct {
	TestID      pgtype.UUID
	OwnerID     pgtype.UUID
	TestName    string
	Description pgtype.Text
	TestType    TestType
	CreatedAt   pgtype.Timestamp
}

type EducationTestResult struct {
	ResultID       pgtype.UUID
	StudentID      pgtype.UUID
	TestID         pgtype.UUID
	RawScore       pgtype.Numeric
	ScaledScore    pgtype.Numeric
	Status         interface{}
	Interpretation pgtype.Text
	TakenAt        pgtype.Timestamp
	UpdatedAt      pgtype.Timestamp
}

type Lesson struct {
	ID        pgtype.UUID
	ThemeID   pgtype.UUID
	GroupID   pgtype.UUID
	TeacherID pgtype.UUID
}

type Problem struct {
	ID    pgtype.UUID
	Title string
}

type Role struct {
	ID    int32
	Title string
}

type School struct {
	ID        pgtype.UUID
	LargeName string
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	DeletedAt pgtype.Timestamp
}

type Solution struct {
	ID        pgtype.UUID
	Title     string
	ProblemID pgtype.UUID
}

type StudyGroup struct {
	ID           pgtype.UUID
	TeacherID    pgtype.UUID
	DisciplineID pgtype.UUID
	ClassID      pgtype.UUID
}

type Theme struct {
	ID           pgtype.UUID
	Name         string
	DisciplineID pgtype.UUID
}

type User struct {
	ID         pgtype.UUID
	FirstName  string
	MiddleName string
	LastName   string
	Email      string
	PassHash   []byte
	Gender     pgtype.Bool
	RoleID     pgtype.Int4
	SchoolID   pgtype.UUID
	ClassesID  pgtype.UUID
	CreatedAt  pgtype.Timestamp
	UpdatedAt  pgtype.Timestamp
	DeletedAt  pgtype.Timestamp
}
