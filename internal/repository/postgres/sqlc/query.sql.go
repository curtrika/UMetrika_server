// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOwner = `-- name: CreateOwner :one
INSERT INTO education.owners (owner_name, email, pass_hash)
VALUES ($1, $2, $3)
RETURNING owner_id, owner_name, pass_hash, email, created_at
`

type CreateOwnerParams struct {
	OwnerName string
	Email     string
	PassHash  []byte
}

// CreateOwner
func (q *Queries) CreateOwner(ctx context.Context, arg CreateOwnerParams) (EducationOwner, error) {
	row := q.db.QueryRow(ctx, createOwner, arg.OwnerName, arg.Email, arg.PassHash)
	var i EducationOwner
	err := row.Scan(
		&i.OwnerID,
		&i.OwnerName,
		&i.PassHash,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const createTest = `-- name: CreateTest :one
INSERT INTO education.tests (owner_id, test_name, description, test_type)
VALUES ($1, $2, $3, $4)
RETURNING test_id, owner_id, test_name, description, test_type, created_at
`

type CreateTestParams struct {
	OwnerID     pgtype.UUID
	TestName    string
	Description pgtype.Text
	TestType    TestType
}

// CreateTest
func (q *Queries) CreateTest(ctx context.Context, arg CreateTestParams) (EducationTest, error) {
	row := q.db.QueryRow(ctx, createTest,
		arg.OwnerID,
		arg.TestName,
		arg.Description,
		arg.TestType,
	)
	var i EducationTest
	err := row.Scan(
		&i.TestID,
		&i.OwnerID,
		&i.TestName,
		&i.Description,
		&i.TestType,
		&i.CreatedAt,
	)
	return i, err
}

const getOwner = `-- name: GetOwner :one
SELECT owner_id, owner_name, pass_hash, email, created_at
FROM education.owners
WHERE owner_id = $1
`

// GetOwner
func (q *Queries) GetOwner(ctx context.Context, ownerID pgtype.UUID) (EducationOwner, error) {
	row := q.db.QueryRow(ctx, getOwner, ownerID)
	var i EducationOwner
	err := row.Scan(
		&i.OwnerID,
		&i.OwnerName,
		&i.PassHash,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getTestsByOwnerId = `-- name: GetTestsByOwnerId :many
SELECT test_id, owner_id, test_name, description, test_type, created_at
FROM education.tests
WHERE owner_id = $1
`

// GetTestsByOwnerId
func (q *Queries) GetTestsByOwnerId(ctx context.Context, ownerID pgtype.UUID) ([]EducationTest, error) {
	rows, err := q.db.Query(ctx, getTestsByOwnerId, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EducationTest
	for rows.Next() {
		var i EducationTest
		if err := rows.Scan(
			&i.TestID,
			&i.OwnerID,
			&i.TestName,
			&i.Description,
			&i.TestType,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOwner = `-- name: ListOwner :many
SELECT owner_id, owner_name, pass_hash, email, created_at
FROM education.owners
`

// ListOwner
func (q *Queries) ListOwner(ctx context.Context) ([]EducationOwner, error) {
	rows, err := q.db.Query(ctx, listOwner)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EducationOwner
	for rows.Next() {
		var i EducationOwner
		if err := rows.Scan(
			&i.OwnerID,
			&i.OwnerName,
			&i.PassHash,
			&i.Email,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
