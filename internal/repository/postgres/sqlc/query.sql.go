// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAnswer = `-- name: CreateAnswer :one
INSERT INTO answer (next_answer_id, title)
VALUES ($1, $2)
RETURNING id, next_answer_id, title
`

type CreateAnswerParams struct {
	NextAnswerID pgtype.Int4
	Title        string
}

// CreateAnswer
func (q *Queries) CreateAnswer(ctx context.Context, arg CreateAnswerParams) (Answer, error) {
	row := q.db.QueryRow(ctx, createAnswer, arg.NextAnswerID, arg.Title)
	var i Answer
	err := row.Scan(&i.ID, &i.NextAnswerID, &i.Title)
	return i, err
}

const createApp = `-- name: CreateApp :one
INSERT INTO apps (name, secret)
VALUES ($1, $2)
RETURNING id, name, secret
`

type CreateAppParams struct {
	Name   string
	Secret string
}

// CreateApp
func (q *Queries) CreateApp(ctx context.Context, arg CreateAppParams) (App, error) {
	row := q.db.QueryRow(ctx, createApp, arg.Name, arg.Secret)
	var i App
	err := row.Scan(&i.ID, &i.Name, &i.Secret)
	return i, err
}

const createPsychologicalPerformance = `-- name: CreatePsychologicalPerformance :one
INSERT INTO psychological_performance (owner_id, psychological_test_id, started_at)
VALUES ($1, $2, $3)
RETURNING id, owner_id, psychological_test_id, started_at
`

type CreatePsychologicalPerformanceParams struct {
	OwnerID             int32
	PsychologicalTestID pgtype.Int4
	StartedAt           pgtype.Timestamptz
}

// CreatePsychologicalPerformance
func (q *Queries) CreatePsychologicalPerformance(ctx context.Context, arg CreatePsychologicalPerformanceParams) (PsychologicalPerformance, error) {
	row := q.db.QueryRow(ctx, createPsychologicalPerformance, arg.OwnerID, arg.PsychologicalTestID, arg.StartedAt)
	var i PsychologicalPerformance
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.PsychologicalTestID,
		&i.StartedAt,
	)
	return i, err
}

const createPsychologicalTest = `-- name: CreatePsychologicalTest :one
INSERT INTO psychological_test (first_question_id, type_id, owner_id, title)
VALUES ($1, $2, $3, $4)
RETURNING id, first_question_id, type_id, owner_id, title
`

type CreatePsychologicalTestParams struct {
	FirstQuestionID pgtype.Int4
	TypeID          pgtype.Int4
	OwnerID         int32
	Title           string
}

// CreatePsychologicalTest
func (q *Queries) CreatePsychologicalTest(ctx context.Context, arg CreatePsychologicalTestParams) (PsychologicalTest, error) {
	row := q.db.QueryRow(ctx, createPsychologicalTest,
		arg.FirstQuestionID,
		arg.TypeID,
		arg.OwnerID,
		arg.Title,
	)
	var i PsychologicalTest
	err := row.Scan(
		&i.ID,
		&i.FirstQuestionID,
		&i.TypeID,
		&i.OwnerID,
		&i.Title,
	)
	return i, err
}

const createPsychologicalType = `-- name: CreatePsychologicalType :one
INSERT INTO psychological_type (title)
VALUES ($1)
RETURNING id, title
`

// CreatePsychologicalType
func (q *Queries) CreatePsychologicalType(ctx context.Context, title string) (PsychologicalType, error) {
	row := q.db.QueryRow(ctx, createPsychologicalType, title)
	var i PsychologicalType
	err := row.Scan(&i.ID, &i.Title)
	return i, err
}

const createQuestion = `-- name: CreateQuestion :one
INSERT INTO question (next_question_id, number, first_answer_id, title)
VALUES ($1, $2, $3, $4)
RETURNING id, next_question_id, number, first_answer_id, title
`

type CreateQuestionParams struct {
	NextQuestionID pgtype.Int4
	Number         int32
	FirstAnswerID  pgtype.Int4
	Title          string
}

// CreateQuestion
func (q *Queries) CreateQuestion(ctx context.Context, arg CreateQuestionParams) (Question, error) {
	row := q.db.QueryRow(ctx, createQuestion,
		arg.NextQuestionID,
		arg.Number,
		arg.FirstAnswerID,
		arg.Title,
	)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.NextQuestionID,
		&i.Number,
		&i.FirstAnswerID,
		&i.Title,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, pass_hash)
VALUES ($1, $2)
RETURNING id, email, pass_hash
`

type CreateUserParams struct {
	Email    string
	PassHash []byte
}

// CreateUser
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.PassHash)
	var i User
	err := row.Scan(&i.ID, &i.Email, &i.PassHash)
	return i, err
}

const getAnswer = `-- name: GetAnswer :one
SELECT id, next_answer_id, title
FROM answer
WHERE id = $1
`

// GetAnswer
func (q *Queries) GetAnswer(ctx context.Context, id int32) (Answer, error) {
	row := q.db.QueryRow(ctx, getAnswer, id)
	var i Answer
	err := row.Scan(&i.ID, &i.NextAnswerID, &i.Title)
	return i, err
}

const getApp = `-- name: GetApp :one
SELECT id, name, secret
FROM apps
WHERE id = $1
`

// GetApp
func (q *Queries) GetApp(ctx context.Context, id int32) (App, error) {
	row := q.db.QueryRow(ctx, getApp, id)
	var i App
	err := row.Scan(&i.ID, &i.Name, &i.Secret)
	return i, err
}

const getPsychologicalPerformance = `-- name: GetPsychologicalPerformance :one
SELECT id, owner_id, psychological_test_id, started_at
FROM psychological_performance
WHERE id = $1
`

// GetPsychologicalPerformance
func (q *Queries) GetPsychologicalPerformance(ctx context.Context, id int32) (PsychologicalPerformance, error) {
	row := q.db.QueryRow(ctx, getPsychologicalPerformance, id)
	var i PsychologicalPerformance
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.PsychologicalTestID,
		&i.StartedAt,
	)
	return i, err
}

const getPsychologicalTest = `-- name: GetPsychologicalTest :one
SELECT id, first_question_id, type_id, owner_id, title
FROM psychological_test
WHERE id = $1
`

// GetPsychologicalTest
func (q *Queries) GetPsychologicalTest(ctx context.Context, id int32) (PsychologicalTest, error) {
	row := q.db.QueryRow(ctx, getPsychologicalTest, id)
	var i PsychologicalTest
	err := row.Scan(
		&i.ID,
		&i.FirstQuestionID,
		&i.TypeID,
		&i.OwnerID,
		&i.Title,
	)
	return i, err
}

const getPsychologicalType = `-- name: GetPsychologicalType :one
SELECT id, title
FROM psychological_type
WHERE id = $1
`

// GetPsychologicalType
func (q *Queries) GetPsychologicalType(ctx context.Context, id int32) (PsychologicalType, error) {
	row := q.db.QueryRow(ctx, getPsychologicalType, id)
	var i PsychologicalType
	err := row.Scan(&i.ID, &i.Title)
	return i, err
}

const getQuestion = `-- name: GetQuestion :one
SELECT id, next_question_id, number, first_answer_id, title
FROM question
WHERE id = $1
`

// GetQuestion
func (q *Queries) GetQuestion(ctx context.Context, id int32) (Question, error) {
	row := q.db.QueryRow(ctx, getQuestion, id)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.NextQuestionID,
		&i.Number,
		&i.FirstAnswerID,
		&i.Title,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, email, pass_hash
FROM users
WHERE id = $1
`

// GetUser
func (q *Queries) GetUser(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(&i.ID, &i.Email, &i.PassHash)
	return i, err
}

const listAnswers = `-- name: ListAnswers :many
SELECT id, next_answer_id, title
FROM answer
`

// ListAnswers
func (q *Queries) ListAnswers(ctx context.Context) ([]Answer, error) {
	rows, err := q.db.Query(ctx, listAnswers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Answer
	for rows.Next() {
		var i Answer
		if err := rows.Scan(&i.ID, &i.NextAnswerID, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listApps = `-- name: ListApps :many
SELECT id, name, secret
FROM apps
`

// ListApps
func (q *Queries) ListApps(ctx context.Context) ([]App, error) {
	rows, err := q.db.Query(ctx, listApps)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []App
	for rows.Next() {
		var i App
		if err := rows.Scan(&i.ID, &i.Name, &i.Secret); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPsychologicalPerformances = `-- name: ListPsychologicalPerformances :many
SELECT id, owner_id, psychological_test_id, started_at
FROM psychological_performance
`

// ListPsychologicalPerformances
func (q *Queries) ListPsychologicalPerformances(ctx context.Context) ([]PsychologicalPerformance, error) {
	rows, err := q.db.Query(ctx, listPsychologicalPerformances)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PsychologicalPerformance
	for rows.Next() {
		var i PsychologicalPerformance
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.PsychologicalTestID,
			&i.StartedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPsychologicalTests = `-- name: ListPsychologicalTests :many
SELECT id, first_question_id, type_id, owner_id, title
FROM psychological_test
`

// ListPsychologicalTests
func (q *Queries) ListPsychologicalTests(ctx context.Context) ([]PsychologicalTest, error) {
	rows, err := q.db.Query(ctx, listPsychologicalTests)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PsychologicalTest
	for rows.Next() {
		var i PsychologicalTest
		if err := rows.Scan(
			&i.ID,
			&i.FirstQuestionID,
			&i.TypeID,
			&i.OwnerID,
			&i.Title,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPsychologicalTypes = `-- name: ListPsychologicalTypes :many
SELECT id, title
FROM psychological_type
`

// ListPsychologicalTypes
func (q *Queries) ListPsychologicalTypes(ctx context.Context) ([]PsychologicalType, error) {
	rows, err := q.db.Query(ctx, listPsychologicalTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PsychologicalType
	for rows.Next() {
		var i PsychologicalType
		if err := rows.Scan(&i.ID, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listQuestions = `-- name: ListQuestions :many
SELECT id, next_question_id, number, first_answer_id, title
FROM question
`

// ListQuestions
func (q *Queries) ListQuestions(ctx context.Context) ([]Question, error) {
	rows, err := q.db.Query(ctx, listQuestions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Question
	for rows.Next() {
		var i Question
		if err := rows.Scan(
			&i.ID,
			&i.NextQuestionID,
			&i.Number,
			&i.FirstAnswerID,
			&i.Title,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, email, pass_hash
FROM users
`

// ListUsers
func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Email, &i.PassHash); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
