// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !goverter

package generated

import (
	models "github.com/curtrika/UMetrika_server/internal/domain/models"
	postgres "github.com/curtrika/UMetrika_server/internal/repository/postgres"
	sqlc "github.com/curtrika/UMetrika_server/internal/repository/postgres/sqlc"
)

type ConverterImpl struct{}

func (c *ConverterImpl) OwnerDBToModel(source sqlc.EducationOwner) models.EducationOwner {
	var modelsEducationOwner models.EducationOwner
	modelsEducationOwner.OwnerID = postgres.UUIDPostgresToGoogle(source.OwnerID)
	modelsEducationOwner.OwnerName = source.OwnerName
	if source.PassHash != nil {
		modelsEducationOwner.PassHash = make([]uint8, len(source.PassHash))
		for i := 0; i < len(source.PassHash); i++ {
			modelsEducationOwner.PassHash[i] = source.PassHash[i]
		}
	}
	modelsEducationOwner.Email = source.Email
	modelsEducationOwner.CreatedAt = postgres.TimestampToTime(source.CreatedAt)
	return modelsEducationOwner
}
func (c *ConverterImpl) OwnerModelToDb(source models.EducationOwner) sqlc.EducationOwner {
	var postgresEducationOwner sqlc.EducationOwner
	postgresEducationOwner.OwnerID = postgres.UUIDGoogleToPostgres(source.OwnerID)
	postgresEducationOwner.OwnerName = source.OwnerName
	if source.PassHash != nil {
		postgresEducationOwner.PassHash = make([]uint8, len(source.PassHash))
		for i := 0; i < len(source.PassHash); i++ {
			postgresEducationOwner.PassHash[i] = source.PassHash[i]
		}
	}
	postgresEducationOwner.Email = source.Email
	postgresEducationOwner.CreatedAt = postgres.TimeToTimestamp(source.CreatedAt)
	return postgresEducationOwner
}
func (c *ConverterImpl) TestDBToModel(source sqlc.EducationTest) models.EducationTest {
	var modelsEducationTest models.EducationTest
	modelsEducationTest.TestID = postgres.UUIDPostgresToGoogle(source.TestID)
	modelsEducationTest.OwnerID = postgres.UUIDPostgresToGoogle(source.OwnerID)
	modelsEducationTest.TestName = source.TestName
	modelsEducationTest.Description = postgres.PostgresTextToString(source.Description)
	modelsEducationTest.TestType = string(source.TestType)
	modelsEducationTest.CreatedAt = postgres.TimestampToTime(source.CreatedAt)
	return modelsEducationTest
}
func (c *ConverterImpl) TestModelToDB(source models.EducationTest) sqlc.EducationTest {
	var postgresEducationTest sqlc.EducationTest
	postgresEducationTest.TestID = postgres.UUIDGoogleToPostgres(source.TestID)
	postgresEducationTest.OwnerID = postgres.UUIDGoogleToPostgres(source.OwnerID)
	postgresEducationTest.TestName = source.TestName
	postgresEducationTest.Description = postgres.StringToPostgresText(source.Description)
	postgresEducationTest.TestType = sqlc.TestType(source.TestType)
	postgresEducationTest.CreatedAt = postgres.TimeToTimestamp(source.CreatedAt)
	return postgresEducationTest
}
func (c *ConverterImpl) TestsDBToModel(source []sqlc.EducationTest) []models.EducationTest {
	var modelsEducationTestList []models.EducationTest
	if source != nil {
		modelsEducationTestList = make([]models.EducationTest, len(source))
		for i := 0; i < len(source); i++ {
			modelsEducationTestList[i] = c.TestDBToModel(source[i])
		}
	}
	return modelsEducationTestList
}
func (c *ConverterImpl) TestsModelToDB(source []models.EducationTest) []sqlc.EducationTest {
	var postgresEducationTestList []sqlc.EducationTest
	if source != nil {
		postgresEducationTestList = make([]sqlc.EducationTest, len(source))
		for i := 0; i < len(source); i++ {
			postgresEducationTestList[i] = c.TestModelToDB(source[i])
		}
	}
	return postgresEducationTestList
}
