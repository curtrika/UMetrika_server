// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !goverter

package storage

import (
	models "github.com/curtrika/UMetrika_server/internal/domain/models"
	storage "github.com/curtrika/UMetrika_server/internal/storage"
	schemas "github.com/curtrika/UMetrika_server/internal/storage/schemas"
	"time"
)

type ConverterImpl struct{}

func (c *ConverterImpl) AppToModel(source schemas.AppSchema) models.App {
	var modelsApp models.App
	modelsApp.ID = source.ID
	modelsApp.Name = source.Name
	modelsApp.Secret = source.Secret
	return modelsApp
}
func (c *ConverterImpl) TeacherDisciplinesToModel(source []schemas.TeacherDisciplineSchema) []models.TeacherDiscipline {
	var modelsTeacherDisciplineList []models.TeacherDiscipline
	if source != nil {
		modelsTeacherDisciplineList = make([]models.TeacherDiscipline, len(source))
		for i := 0; i < len(source); i++ {
			modelsTeacherDisciplineList[i] = c.schemasTeacherDisciplineSchemaToModelsTeacherDiscipline(source[i])
		}
	}
	return modelsTeacherDisciplineList
}
func (c *ConverterImpl) schemasClassesSchemaToModelsClasses(source schemas.ClassesSchema) models.Classes {
	var modelsClasses models.Classes
	modelsClasses.ID = storage.UUIDtoUUID(source.ID)
	modelsClasses.Title = source.Title
	modelsClasses.MainTeacherID = storage.UUIDtoUUID(source.MainTeacherID)
	var modelsUserList []models.User
	if source.Students != nil {
		modelsUserList = make([]models.User, len(source.Students))
		for i := 0; i < len(source.Students); i++ {
			modelsUserList[i] = c.schemasUserSchemaToModelsUser(source.Students[i])
		}
	}
	modelsClasses.Students = modelsUserList
	return modelsClasses
}
func (c *ConverterImpl) schemasTeacherDisciplineSchemaToModelsTeacherDiscipline(source schemas.TeacherDisciplineSchema) models.TeacherDiscipline {
	var modelsTeacherDiscipline models.TeacherDiscipline
	modelsTeacherDiscipline.ID = storage.UUIDtoUUID(source.ID)
	modelsTeacherDiscipline.Title = storage.UUIDtoUUID(source.Title)
	var modelsClassesList []models.Classes
	if source.Classes != nil {
		modelsClassesList = make([]models.Classes, len(source.Classes))
		for i := 0; i < len(source.Classes); i++ {
			modelsClassesList[i] = c.schemasClassesSchemaToModelsClasses(source.Classes[i])
		}
	}
	modelsTeacherDiscipline.Classes = modelsClassesList
	return modelsTeacherDiscipline
}
func (c *ConverterImpl) schemasUserSchemaToModelsUser(source schemas.UserSchema) models.User {
	var modelsUser models.User
	modelsUser.ID = storage.UUIDtoUUID(source.ID)
	modelsUser.FirstName = source.FirstName
	modelsUser.MiddleName = source.MiddleName
	modelsUser.LastName = source.LastName
	modelsUser.Email = source.Email
	modelsUser.Gender = source.Gender
	modelsUser.Role = source.Role
	modelsUser.SchoolID = storage.UUIDtoUUID(source.SchoolID)
	modelsUser.ClassesID = storage.UUIDtoUUID(source.ClassesID)
	modelsUser.CreatedAt = c.timeTimeToTimeTime(source.CreatedAt)
	modelsUser.UpdatedAt = c.timeTimeToTimeTime(source.UpdatedAt)
	modelsUser.DeletedAt = c.timeTimeToTimeTime(source.DeletedAt)
	return modelsUser
}
func (c *ConverterImpl) timeTimeToTimeTime(source time.Time) time.Time {
	var timeTime time.Time
	_ = source
	return timeTime
}
