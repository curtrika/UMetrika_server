// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !goverter

package converter

import (
	models "github.com/curtrika/UMetrika_server/internal/domain/models"
	umetrika "github.com/curtrika/UMetrika_server/internal/grpc/umetrika"
	v1 "github.com/curtrika/UMetrika_server/pkg/proto/umetrika/v1"
)

type ConverterImpl struct{}

func (c *ConverterImpl) AnswerDTOProtoToModel(source *v1.AnswerPostDTO) (*models.EducationAnswer, error) {
	var pModelsEducationAnswer *models.EducationAnswer
	if source != nil {
		var modelsEducationAnswer models.EducationAnswer
		modelsEducationAnswer.AnswerText = (*source).AnswerText
		modelsEducationAnswer.AnswerOrder = (*source).AnswerOrder
		pModelsEducationAnswer = &modelsEducationAnswer
	}
	return pModelsEducationAnswer, nil
}
func (c *ConverterImpl) AnswerDTOsProtoToModel(source []*v1.AnswerPostDTO) ([]*models.EducationAnswer, error) {
	var pModelsEducationAnswerList []*models.EducationAnswer
	if source != nil {
		pModelsEducationAnswerList = make([]*models.EducationAnswer, len(source))
		for i := 0; i < len(source); i++ {
			pModelsEducationAnswer, err := c.AnswerDTOProtoToModel(source[i])
			if err != nil {
				return nil, err
			}
			pModelsEducationAnswerList[i] = pModelsEducationAnswer
		}
	}
	return pModelsEducationAnswerList, nil
}
func (c *ConverterImpl) OwnerModelToProto(source *models.EducationOwner) *v1.OwnerResult {
	var pV1OwnerResult *v1.OwnerResult
	if source != nil {
		var v1OwnerResult v1.OwnerResult
		v1OwnerResult.OwnerId = umetrika.UUIDToString((*source).OwnerID)
		v1OwnerResult.OwnerName = (*source).OwnerName
		v1OwnerResult.Email = (*source).Email
		v1OwnerResult.CreatedAt = umetrika.TimeToTimeStamp((*source).CreatedAt)
		pV1OwnerResult = &v1OwnerResult
	}
	return pV1OwnerResult
}
func (c *ConverterImpl) OwnerProtoToModel(source *v1.OwnerPost) (*models.EducationOwner, error) {
	var pModelsEducationOwner *models.EducationOwner
	if source != nil {
		var modelsEducationOwner models.EducationOwner
		modelsEducationOwner.OwnerName = (*source).OwnerName
		modelsEducationOwner.Email = (*source).Email
		pModelsEducationOwner = &modelsEducationOwner
	}
	return pModelsEducationOwner, nil
}
func (c *ConverterImpl) QuestionDTOProtoToModel(source *v1.QuestionPostDTO) (*models.EducationQuestion, error) {
	var pModelsEducationQuestion *models.EducationQuestion
	if source != nil {
		var modelsEducationQuestion models.EducationQuestion
		modelsEducationQuestion.QuestionText = (*source).QuestionText
		modelsEducationQuestion.QuestionType = (*source).QuestionType
		modelsEducationQuestion.QuestionOrder = (*source).QuestionOrder
		pModelsEducationQuestion = &modelsEducationQuestion
	}
	return pModelsEducationQuestion, nil
}
func (c *ConverterImpl) QuestionDTOsProtoToModel(source []*v1.QuestionPostDTO) ([]*models.EducationQuestion, error) {
	var pModelsEducationQuestionList []*models.EducationQuestion
	if source != nil {
		pModelsEducationQuestionList = make([]*models.EducationQuestion, len(source))
		for i := 0; i < len(source); i++ {
			pModelsEducationQuestion, err := c.QuestionDTOProtoToModel(source[i])
			if err != nil {
				return nil, err
			}
			pModelsEducationQuestionList[i] = pModelsEducationQuestion
		}
	}
	return pModelsEducationQuestionList, nil
}
func (c *ConverterImpl) TeacherDisciplineToProto(source models.TeacherDiscipline) (*v1.TeacherDiscipline, error) {
	var v1TeacherDiscipline v1.TeacherDiscipline
	v1TeacherDiscipline.ID = umetrika.UUIDToString(source.ID)
	v1TeacherDiscipline.Title = umetrika.UUIDToString(source.Title)
	var pV1ClassesList []*v1.Classes
	if source.Classes != nil {
		pV1ClassesList = make([]*v1.Classes, len(source.Classes))
		for i := 0; i < len(source.Classes); i++ {
			pV1ClassesList[i] = c.modelsClassesToPV1Classes(source.Classes[i])
		}
	}
	v1TeacherDiscipline.Classes = pV1ClassesList
	return &v1TeacherDiscipline, nil
}
func (c *ConverterImpl) TestModelToProto(source *models.EducationTest) (*v1.TestResult, error) {
	var pV1TestResult *v1.TestResult
	if source != nil {
		var v1TestResult v1.TestResult
		v1TestResult.TestId = umetrika.UUIDToString((*source).TestID)
		v1TestResult.OwnerId = umetrika.UUIDToString((*source).OwnerID)
		v1TestResult.TestName = (*source).TestName
		v1TestResult.CreatedAt = umetrika.TimeToTimeStamp((*source).CreatedAt)
		pV1TestResult = &v1TestResult
	}
	return pV1TestResult, nil
}
func (c *ConverterImpl) TestProtoToModel(source *v1.TestPost) (*models.EducationTest, error) {
	var pModelsEducationTest *models.EducationTest
	if source != nil {
		var modelsEducationTest models.EducationTest
		uuidUUID, err := umetrika.StringToUUID((*source).OwnerId)
		if err != nil {
			return nil, err
		}
		modelsEducationTest.OwnerID = uuidUUID
		modelsEducationTest.TestName = (*source).TestName
		modelsEducationTest.Description = (*source).Description
		modelsEducationTest.TestType = (*source).TestType
		pModelsEducationTest = &modelsEducationTest
	}
	return pModelsEducationTest, nil
}
func (c *ConverterImpl) modelsClassesToPV1Classes(source models.Classes) *v1.Classes {
	var v1Classes v1.Classes
	v1Classes.ID = umetrika.UUIDToString(source.ID)
	v1Classes.Title = source.Title
	v1Classes.MainTeacherID = umetrika.UUIDToString(source.MainTeacherID)
	var pV1UserList []*v1.User
	if source.Students != nil {
		pV1UserList = make([]*v1.User, len(source.Students))
		for i := 0; i < len(source.Students); i++ {
			pV1UserList[i] = c.modelsUserToPV1User(source.Students[i])
		}
	}
	v1Classes.Students = pV1UserList
	return &v1Classes
}
func (c *ConverterImpl) modelsUserToPV1User(source models.User) *v1.User {
	var v1User v1.User
	v1User.Id = umetrika.UUIDToString(source.ID)
	v1User.FirstName = source.FirstName
	v1User.MiddleName = source.MiddleName
	v1User.LastName = source.LastName
	v1User.Email = source.Email
	v1User.Gender = source.Gender
	v1User.Role = source.Role
	v1User.SchoolId = umetrika.UUIDToString(source.SchoolID)
	v1User.ClassesId = umetrika.UUIDToString(source.ClassesID)
	return &v1User
}
